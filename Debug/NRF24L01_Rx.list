
NRF24L01_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004360  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  080044f0  080044f0  000144f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a90  08004a90  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004a90  08004a90  00014a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a98  08004a98  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a98  08004a98  00014a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004aa0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000078  08004b18  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08004b18  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afcd  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a4b  00000000  00000000  0002b075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002cac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000206d8  00000000  00000000  0002dde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c93  00000000  00000000  0004e4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3f54  00000000  00000000  00058153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011c0a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd8  00000000  00000000  0011c0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044d8 	.word	0x080044d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080044d8 	.word	0x080044d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <NRF24_DelayMicroSeconds+0x3c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <NRF24_DelayMicroSeconds+0x40>)
 800058a:	fba2 2303 	umull	r2, r3, r2, r3
 800058e:	0c9a      	lsrs	r2, r3, #18
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	fb02 f303 	mul.w	r3, r2, r3
 8000596:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000598:	bf00      	nop
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	1e5a      	subs	r2, r3, #1
 800059e:	60fa      	str	r2, [r7, #12]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1fa      	bne.n	800059a <NRF24_DelayMicroSeconds+0x22>
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000008 	.word	0x20000008
 80005b8:	165e9f81 	.word	0x165e9f81

080005bc <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d008      	beq.n	80005dc <NRF24_csn+0x20>
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <NRF24_csn+0x38>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <NRF24_csn+0x3c>)
 80005d0:	8811      	ldrh	r1, [r2, #0]
 80005d2:	2201      	movs	r2, #1
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fe23 	bl	8002220 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80005da:	e007      	b.n	80005ec <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <NRF24_csn+0x38>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <NRF24_csn+0x3c>)
 80005e2:	8811      	ldrh	r1, [r2, #0]
 80005e4:	2200      	movs	r2, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fe1a 	bl	8002220 <HAL_GPIO_WritePin>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200000a4 	.word	0x200000a4
 80005f8:	200000a8 	.word	0x200000a8

080005fc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d008      	beq.n	800061c <NRF24_ce+0x20>
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <NRF24_ce+0x38>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <NRF24_ce+0x3c>)
 8000610:	8811      	ldrh	r1, [r2, #0]
 8000612:	2201      	movs	r2, #1
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fe03 	bl	8002220 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800061a:	e007      	b.n	800062c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <NRF24_ce+0x38>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a05      	ldr	r2, [pc, #20]	; (8000638 <NRF24_ce+0x3c>)
 8000622:	8811      	ldrh	r1, [r2, #0]
 8000624:	2200      	movs	r2, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f001 fdfa 	bl	8002220 <HAL_GPIO_WritePin>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200000a4 	.word	0x200000a4
 8000638:	200000aa 	.word	0x200000aa

0800063c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000646:	2000      	movs	r0, #0
 8000648:	f7ff ffb8 	bl	80005bc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	f003 031f 	and.w	r3, r3, #31
 8000652:	b2db      	uxtb	r3, r3
 8000654:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000656:	f107 010c 	add.w	r1, r7, #12
 800065a:	2364      	movs	r3, #100	; 0x64
 800065c:	2201      	movs	r2, #1
 800065e:	480a      	ldr	r0, [pc, #40]	; (8000688 <NRF24_read_register+0x4c>)
 8000660:	f002 fac9 	bl	8002bf6 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	1c59      	adds	r1, r3, #1
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	2201      	movs	r2, #1
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <NRF24_read_register+0x4c>)
 8000670:	f002 fbfd 	bl	8002e6e <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000674:	7b7b      	ldrb	r3, [r7, #13]
 8000676:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f7ff ff9f 	bl	80005bc <NRF24_csn>
	return retData;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000ac 	.word	0x200000ac

0800068c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	4613      	mov	r3, r2
 800069a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ff8d 	bl	80005bc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 031f 	and.w	r3, r3, #31
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006ac:	f107 010c 	add.w	r1, r7, #12
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	2201      	movs	r2, #1
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <NRF24_read_registerN+0x4c>)
 80006b6:	f002 fa9e 	bl	8002bf6 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80006ba:	79bb      	ldrb	r3, [r7, #6]
 80006bc:	b29a      	uxth	r2, r3
 80006be:	2364      	movs	r3, #100	; 0x64
 80006c0:	6839      	ldr	r1, [r7, #0]
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <NRF24_read_registerN+0x4c>)
 80006c4:	f002 fbd3 	bl	8002e6e <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f7ff ff77 	bl	80005bc <NRF24_csn>
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200000ac 	.word	0x200000ac

080006dc <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff ff65 	bl	80005bc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	f043 0320 	orr.w	r3, r3, #32
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80006fc:	79bb      	ldrb	r3, [r7, #6]
 80006fe:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000700:	f107 010c 	add.w	r1, r7, #12
 8000704:	2364      	movs	r3, #100	; 0x64
 8000706:	2202      	movs	r2, #2
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <NRF24_write_register+0x40>)
 800070a:	f002 fa74 	bl	8002bf6 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800070e:	2001      	movs	r0, #1
 8000710:	f7ff ff54 	bl	80005bc <NRF24_csn>
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000ac 	.word	0x200000ac

08000720 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	6039      	str	r1, [r7, #0]
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff ff43 	bl	80005bc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f043 0320 	orr.w	r3, r3, #32
 800073c:	b2db      	uxtb	r3, r3
 800073e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000740:	f107 010c 	add.w	r1, r7, #12
 8000744:	2364      	movs	r3, #100	; 0x64
 8000746:	2201      	movs	r2, #1
 8000748:	4808      	ldr	r0, [pc, #32]	; (800076c <NRF24_write_registerN+0x4c>)
 800074a:	f002 fa54 	bl	8002bf6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800074e:	79bb      	ldrb	r3, [r7, #6]
 8000750:	b29a      	uxth	r2, r3
 8000752:	2364      	movs	r3, #100	; 0x64
 8000754:	6839      	ldr	r1, [r7, #0]
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <NRF24_write_registerN+0x4c>)
 8000758:	f002 fa4d 	bl	8002bf6 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff ff2d 	bl	80005bc <NRF24_csn>
}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000ac 	.word	0x200000ac

08000770 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000774:	21ff      	movs	r1, #255	; 0xff
 8000776:	20e1      	movs	r0, #225	; 0xe1
 8000778:	f7ff ffb0 	bl	80006dc <NRF24_write_register>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000784:	21ff      	movs	r1, #255	; 0xff
 8000786:	20e2      	movs	r0, #226	; 0xe2
 8000788:	f7ff ffa8 	bl	80006dc <NRF24_write_register>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000790:	b082      	sub	sp, #8
 8000792:	b580      	push	{r7, lr}
 8000794:	b084      	sub	sp, #16
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	61fb      	str	r3, [r7, #28]
 800079c:	460b      	mov	r3, r1
 800079e:	807b      	strh	r3, [r7, #2]
 80007a0:	4613      	mov	r3, r2
 80007a2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80007a4:	4b66      	ldr	r3, [pc, #408]	; (8000940 <NRF24_begin+0x1b0>)
 80007a6:	4618      	mov	r0, r3
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	2258      	movs	r2, #88	; 0x58
 80007ae:	4619      	mov	r1, r3
 80007b0:	f003 fa5c 	bl	8003c6c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80007b4:	4a63      	ldr	r2, [pc, #396]	; (8000944 <NRF24_begin+0x1b4>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80007ba:	4a63      	ldr	r2, [pc, #396]	; (8000948 <NRF24_begin+0x1b8>)
 80007bc:	887b      	ldrh	r3, [r7, #2]
 80007be:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80007c0:	4a62      	ldr	r2, [pc, #392]	; (800094c <NRF24_begin+0x1bc>)
 80007c2:	883b      	ldrh	r3, [r7, #0]
 80007c4:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff fef8 	bl	80005bc <NRF24_csn>
	NRF24_ce(0);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff ff15 	bl	80005fc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80007d2:	2005      	movs	r0, #5
 80007d4:	f001 fa7e 	bl	8001cd4 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80007d8:	2108      	movs	r1, #8
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ff7e 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80007e0:	213f      	movs	r1, #63	; 0x3f
 80007e2:	2001      	movs	r0, #1
 80007e4:	f7ff ff7a 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80007e8:	2103      	movs	r1, #3
 80007ea:	2002      	movs	r0, #2
 80007ec:	f7ff ff76 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80007f0:	2103      	movs	r1, #3
 80007f2:	2003      	movs	r0, #3
 80007f4:	f7ff ff72 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80007f8:	2103      	movs	r1, #3
 80007fa:	2004      	movs	r0, #4
 80007fc:	f7ff ff6e 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000800:	2102      	movs	r1, #2
 8000802:	2005      	movs	r0, #5
 8000804:	f7ff ff6a 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000808:	210f      	movs	r1, #15
 800080a:	2006      	movs	r0, #6
 800080c:	f7ff ff66 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000810:	210e      	movs	r1, #14
 8000812:	2007      	movs	r0, #7
 8000814:	f7ff ff62 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000818:	2100      	movs	r1, #0
 800081a:	2008      	movs	r0, #8
 800081c:	f7ff ff5e 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000820:	2100      	movs	r1, #0
 8000822:	2009      	movs	r0, #9
 8000824:	f7ff ff5a 	bl	80006dc <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000828:	23e7      	movs	r3, #231	; 0xe7
 800082a:	733b      	strb	r3, [r7, #12]
 800082c:	23e7      	movs	r3, #231	; 0xe7
 800082e:	72fb      	strb	r3, [r7, #11]
 8000830:	23e7      	movs	r3, #231	; 0xe7
 8000832:	72bb      	strb	r3, [r7, #10]
 8000834:	23e7      	movs	r3, #231	; 0xe7
 8000836:	727b      	strb	r3, [r7, #9]
 8000838:	23e7      	movs	r3, #231	; 0xe7
 800083a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	2205      	movs	r2, #5
 8000842:	4619      	mov	r1, r3
 8000844:	200a      	movs	r0, #10
 8000846:	f7ff ff6b 	bl	8000720 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 800084a:	23c2      	movs	r3, #194	; 0xc2
 800084c:	733b      	strb	r3, [r7, #12]
 800084e:	23c2      	movs	r3, #194	; 0xc2
 8000850:	72fb      	strb	r3, [r7, #11]
 8000852:	23c2      	movs	r3, #194	; 0xc2
 8000854:	72bb      	strb	r3, [r7, #10]
 8000856:	23c2      	movs	r3, #194	; 0xc2
 8000858:	727b      	strb	r3, [r7, #9]
 800085a:	23c2      	movs	r3, #194	; 0xc2
 800085c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	2205      	movs	r2, #5
 8000864:	4619      	mov	r1, r3
 8000866:	200b      	movs	r0, #11
 8000868:	f7ff ff5a 	bl	8000720 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800086c:	21c3      	movs	r1, #195	; 0xc3
 800086e:	200c      	movs	r0, #12
 8000870:	f7ff ff34 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000874:	21c4      	movs	r1, #196	; 0xc4
 8000876:	200d      	movs	r0, #13
 8000878:	f7ff ff30 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800087c:	21c5      	movs	r1, #197	; 0xc5
 800087e:	200e      	movs	r0, #14
 8000880:	f7ff ff2c 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000884:	21c6      	movs	r1, #198	; 0xc6
 8000886:	200f      	movs	r0, #15
 8000888:	f7ff ff28 	bl	80006dc <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800088c:	23e7      	movs	r3, #231	; 0xe7
 800088e:	733b      	strb	r3, [r7, #12]
 8000890:	23e7      	movs	r3, #231	; 0xe7
 8000892:	72fb      	strb	r3, [r7, #11]
 8000894:	23e7      	movs	r3, #231	; 0xe7
 8000896:	72bb      	strb	r3, [r7, #10]
 8000898:	23e7      	movs	r3, #231	; 0xe7
 800089a:	727b      	strb	r3, [r7, #9]
 800089c:	23e7      	movs	r3, #231	; 0xe7
 800089e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	2205      	movs	r2, #5
 80008a6:	4619      	mov	r1, r3
 80008a8:	2010      	movs	r0, #16
 80008aa:	f7ff ff39 	bl	8000720 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80008ae:	2100      	movs	r1, #0
 80008b0:	2011      	movs	r0, #17
 80008b2:	f7ff ff13 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80008b6:	2100      	movs	r1, #0
 80008b8:	2012      	movs	r0, #18
 80008ba:	f7ff ff0f 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80008be:	2100      	movs	r1, #0
 80008c0:	2013      	movs	r0, #19
 80008c2:	f7ff ff0b 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2014      	movs	r0, #20
 80008ca:	f7ff ff07 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80008ce:	2100      	movs	r1, #0
 80008d0:	2015      	movs	r0, #21
 80008d2:	f7ff ff03 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80008d6:	2100      	movs	r1, #0
 80008d8:	2016      	movs	r0, #22
 80008da:	f7ff feff 	bl	80006dc <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80008de:	f000 fa3f 	bl	8000d60 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80008e2:	2100      	movs	r1, #0
 80008e4:	201c      	movs	r0, #28
 80008e6:	f7ff fef9 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80008ea:	2100      	movs	r1, #0
 80008ec:	201d      	movs	r0, #29
 80008ee:	f7ff fef5 	bl	80006dc <NRF24_write_register>
	printRadioSettings();
 80008f2:	f000 fa4f 	bl	8000d94 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80008f6:	210f      	movs	r1, #15
 80008f8:	200f      	movs	r0, #15
 80008fa:	f000 f89d 	bl	8000a38 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80008fe:	2003      	movs	r0, #3
 8000900:	f000 f96f 	bl	8000be2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000904:	2001      	movs	r0, #1
 8000906:	f000 f9a5 	bl	8000c54 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800090a:	2002      	movs	r0, #2
 800090c:	f000 f9e8 	bl	8000ce0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000910:	f000 f93a 	bl	8000b88 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000914:	2020      	movs	r0, #32
 8000916:	f000 f8bf 	bl	8000a98 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 800091a:	f000 fa18 	bl	8000d4e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800091e:	204c      	movs	r0, #76	; 0x4c
 8000920:	f000 f8a5 	bl	8000a6e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000924:	f7ff ff24 	bl	8000770 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000928:	f7ff ff2a 	bl	8000780 <NRF24_flush_rx>
	
	NRF24_powerDown();
 800092c:	f000 fa00 	bl	8000d30 <NRF24_powerDown>
	
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800093a:	b002      	add	sp, #8
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	200000ac 	.word	0x200000ac
 8000944:	200000a4 	.word	0x200000a4
 8000948:	200000a8 	.word	0x200000a8
 800094c:	200000aa 	.word	0x200000aa

08000950 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fe71 	bl	800063c <NRF24_read_register>
 800095a:	4603      	mov	r3, r0
 800095c:	f043 0303 	orr.w	r3, r3, #3
 8000960:	b2db      	uxtb	r3, r3
 8000962:	4619      	mov	r1, r3
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff feb9 	bl	80006dc <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <NRF24_startListening+0x48>)
 800096c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000970:	4313      	orrs	r3, r2
 8000972:	d004      	beq.n	800097e <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000974:	2205      	movs	r2, #5
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <NRF24_startListening+0x48>)
 8000978:	200a      	movs	r0, #10
 800097a:	f7ff fed1 	bl	8000720 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 800097e:	f7ff fef7 	bl	8000770 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000982:	f7ff fefd 	bl	8000780 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff fe38 	bl	80005fc <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 800098c:	2096      	movs	r0, #150	; 0x96
 800098e:	f7ff fdf3 	bl	8000578 <NRF24_DelayMicroSeconds>
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000098 	.word	0x20000098

0800099c <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4601      	mov	r1, r0
 80009a4:	e9c7 2300 	strd	r2, r3, [r7]
 80009a8:	460b      	mov	r3, r1
 80009aa:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d104      	bne.n	80009bc <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 80009b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009b6:	491c      	ldr	r1, [pc, #112]	; (8000a28 <NRF24_openReadingPipe+0x8c>)
 80009b8:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	2b06      	cmp	r3, #6
 80009c0:	d82d      	bhi.n	8000a1e <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d808      	bhi.n	80009da <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <NRF24_openReadingPipe+0x90>)
 80009cc:	5cd3      	ldrb	r3, [r2, r3]
 80009ce:	4639      	mov	r1, r7
 80009d0:	2205      	movs	r2, #5
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fea4 	bl	8000720 <NRF24_write_registerN>
 80009d8:	e007      	b.n	80009ea <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <NRF24_openReadingPipe+0x90>)
 80009de:	5cd3      	ldrb	r3, [r2, r3]
 80009e0:	4639      	mov	r1, r7
 80009e2:	2201      	movs	r2, #1
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fe9b 	bl	8000720 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <NRF24_openReadingPipe+0x94>)
 80009ee:	5cd3      	ldrb	r3, [r2, r3]
 80009f0:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <NRF24_openReadingPipe+0x98>)
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fe70 	bl	80006dc <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80009fc:	2002      	movs	r0, #2
 80009fe:	f7ff fe1d 	bl	800063c <NRF24_read_register>
 8000a02:	4603      	mov	r3, r0
 8000a04:	b25a      	sxtb	r2, r3
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	2101      	movs	r1, #1
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	4313      	orrs	r3, r2
 8000a12:	b25b      	sxtb	r3, r3
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4619      	mov	r1, r3
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f7ff fe5f 	bl	80006dc <NRF24_write_register>
	}
	
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000098 	.word	0x20000098
 8000a2c:	08004a34 	.word	0x08004a34
 8000a30:	08004a3c 	.word	0x08004a3c
 8000a34:	200000a0 	.word	0x200000a0

08000a38 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	460a      	mov	r2, r1
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	4613      	mov	r3, r2
 8000a46:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	011b      	lsls	r3, r3, #4
 8000a4c:	b25a      	sxtb	r2, r3
 8000a4e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	b25b      	sxtb	r3, r3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	2004      	movs	r0, #4
 8000a62:	f7ff fe3b 	bl	80006dc <NRF24_write_register>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b084      	sub	sp, #16
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000a78:	237f      	movs	r3, #127	; 0x7f
 8000a7a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000a7c:	7bfa      	ldrb	r2, [r7, #15]
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	4293      	cmp	r3, r2
 8000a82:	bf28      	it	cs
 8000a84:	4613      	movcs	r3, r2
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	4619      	mov	r1, r3
 8000a8a:	2005      	movs	r0, #5
 8000a8c:	f7ff fe26 	bl	80006dc <NRF24_write_register>
}
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000aa2:	2320      	movs	r3, #32
 8000aa4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000aa6:	7bfa      	ldrb	r2, [r7, #15]
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	bf28      	it	cs
 8000aae:	4613      	movcs	r3, r2
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <NRF24_setPayloadSize+0x2c>)
 8000ab4:	701a      	strb	r2, [r3, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200000a0 	.word	0x200000a0

08000ac8 <NRF24_enableAckPayload>:
{
	return NRF24_read_register(CMD_R_RX_PL_WID);
}
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000acc:	201d      	movs	r0, #29
 8000ace:	f7ff fdb5 	bl	800063c <NRF24_read_register>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f043 0306 	orr.w	r3, r3, #6
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	4619      	mov	r1, r3
 8000adc:	201d      	movs	r0, #29
 8000ade:	f7ff fdfd 	bl	80006dc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000ae2:	201d      	movs	r0, #29
 8000ae4:	f7ff fdaa 	bl	800063c <NRF24_read_register>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d10c      	bne.n	8000b08 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000aee:	f000 f937 	bl	8000d60 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000af2:	201d      	movs	r0, #29
 8000af4:	f7ff fda2 	bl	800063c <NRF24_read_register>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f043 0306 	orr.w	r3, r3, #6
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	4619      	mov	r1, r3
 8000b02:	201d      	movs	r0, #29
 8000b04:	f7ff fdea 	bl	80006dc <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000b08:	201c      	movs	r0, #28
 8000b0a:	f7ff fd97 	bl	800063c <NRF24_read_register>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f043 0303 	orr.w	r3, r3, #3
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	4619      	mov	r1, r3
 8000b18:	201c      	movs	r0, #28
 8000b1a:	f7ff fddf 	bl	80006dc <NRF24_write_register>
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000b28:	201d      	movs	r0, #29
 8000b2a:	f7ff fd87 	bl	800063c <NRF24_read_register>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	4619      	mov	r1, r3
 8000b38:	201d      	movs	r0, #29
 8000b3a:	f7ff fdcf 	bl	80006dc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000b3e:	201d      	movs	r0, #29
 8000b40:	f7ff fd7c 	bl	800063c <NRF24_read_register>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d10c      	bne.n	8000b64 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000b4a:	f000 f909 	bl	8000d60 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000b4e:	201d      	movs	r0, #29
 8000b50:	f7ff fd74 	bl	800063c <NRF24_read_register>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	201d      	movs	r0, #29
 8000b60:	f7ff fdbc 	bl	80006dc <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000b64:	201c      	movs	r0, #28
 8000b66:	f7ff fd69 	bl	800063c <NRF24_read_register>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	4619      	mov	r1, r3
 8000b74:	201c      	movs	r0, #28
 8000b76:	f7ff fdb1 	bl	80006dc <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000b7a:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <NRF24_enableDynamicPayloads+0x60>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
	
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000a1 	.word	0x200000a1

08000b88 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000b8c:	201d      	movs	r0, #29
 8000b8e:	f7ff fd55 	bl	800063c <NRF24_read_register>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f023 0304 	bic.w	r3, r3, #4
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	201d      	movs	r0, #29
 8000b9e:	f7ff fd9d 	bl	80006dc <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	201c      	movs	r0, #28
 8000ba6:	f7ff fd99 	bl	80006dc <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000baa:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <NRF24_disableDynamicPayloads+0x2c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000a1 	.word	0x200000a1

08000bb8 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d004      	beq.n	8000bd2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000bc8:	213f      	movs	r1, #63	; 0x3f
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff fd86 	bl	80006dc <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000bd0:	e003      	b.n	8000bda <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f7ff fd81 	bl	80006dc <NRF24_write_register>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b084      	sub	sp, #16
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000bec:	2006      	movs	r0, #6
 8000bee:	f7ff fd25 	bl	800063c <NRF24_read_register>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	f023 0306 	bic.w	r3, r3, #6
 8000bfc:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d104      	bne.n	8000c0e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	f043 0306 	orr.w	r3, r3, #6
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	e019      	b.n	8000c42 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d104      	bne.n	8000c1e <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e011      	b.n	8000c42 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d104      	bne.n	8000c2e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	e009      	b.n	8000c42 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d006      	beq.n	8000c42 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d103      	bne.n	8000c42 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	f043 0306 	orr.w	r3, r3, #6
 8000c40:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	4619      	mov	r1, r3
 8000c46:	2006      	movs	r0, #6
 8000c48:	f7ff fd48 	bl	80006dc <NRF24_write_register>
}
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c62:	2006      	movs	r0, #6
 8000c64:	f7ff fcea 	bl	800063c <NRF24_read_register>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <NRF24_setDataRate+0x88>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000c78:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d107      	bne.n	8000c90 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <NRF24_setDataRate+0x88>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000c86:	7bbb      	ldrb	r3, [r7, #14]
 8000c88:	f043 0320 	orr.w	r3, r3, #32
 8000c8c:	73bb      	strb	r3, [r7, #14]
 8000c8e:	e00d      	b.n	8000cac <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d107      	bne.n	8000ca6 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <NRF24_setDataRate+0x88>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000c9c:	7bbb      	ldrb	r3, [r7, #14]
 8000c9e:	f043 0308 	orr.w	r3, r3, #8
 8000ca2:	73bb      	strb	r3, [r7, #14]
 8000ca4:	e002      	b.n	8000cac <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <NRF24_setDataRate+0x88>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000cac:	7bbb      	ldrb	r3, [r7, #14]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	2006      	movs	r0, #6
 8000cb2:	f7ff fd13 	bl	80006dc <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000cb6:	2006      	movs	r0, #6
 8000cb8:	f7ff fcc0 	bl	800063c <NRF24_read_register>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	7bbb      	ldrb	r3, [r7, #14]
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d102      	bne.n	8000ccc <NRF24_setDataRate+0x78>
  {
    result = true;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	73fb      	strb	r3, [r7, #15]
 8000cca:	e002      	b.n	8000cd2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <NRF24_setDataRate+0x88>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200000a2 	.word	0x200000a2

08000ce0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff fca6 	bl	800063c <NRF24_read_register>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f023 030c 	bic.w	r3, r3, #12
 8000cf6:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00f      	beq.n	8000d1e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d104      	bne.n	8000d0e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	73fb      	strb	r3, [r7, #15]
 8000d0c:	e007      	b.n	8000d1e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	4619      	mov	r1, r3
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff fcda 	bl	80006dc <NRF24_write_register>
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff fc81 	bl	800063c <NRF24_read_register>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f023 0302 	bic.w	r3, r3, #2
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4619      	mov	r1, r3
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff fcc9 	bl	80006dc <NRF24_write_register>
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000d52:	2170      	movs	r1, #112	; 0x70
 8000d54:	2007      	movs	r0, #7
 8000d56:	f7ff fcc1 	bl	80006dc <NRF24_write_register>
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff fc28 	bl	80005bc <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000d6c:	2350      	movs	r3, #80	; 0x50
 8000d6e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000d70:	2373      	movs	r3, #115	; 0x73
 8000d72:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000d74:	1d39      	adds	r1, r7, #4
 8000d76:	2364      	movs	r3, #100	; 0x64
 8000d78:	2202      	movs	r2, #2
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <NRF24_ACTIVATE_cmd+0x30>)
 8000d7c:	f001 ff3b 	bl	8002bf6 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000d80:	2001      	movs	r0, #1
 8000d82:	f7ff fc1b 	bl	80005bc <NRF24_csn>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000ac 	.word	0x200000ac

08000d94 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d96:	b0a1      	sub	sp, #132	; 0x84
 8000d98:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000d9a:	f107 0308 	add.w	r3, r7, #8
 8000d9e:	49c3      	ldr	r1, [pc, #780]	; (80010ac <printRadioSettings+0x318>)
 8000da0:	4618      	mov	r0, r3
 8000da2:	f002 ff79 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fa10 	bl	80001d0 <strlen>
 8000db0:	4603      	mov	r3, r0
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	f107 0108 	add.w	r1, r7, #8
 8000db8:	230a      	movs	r3, #10
 8000dba:	48bd      	ldr	r0, [pc, #756]	; (80010b0 <printRadioSettings+0x31c>)
 8000dbc:	f002 fc87 	bl	80036ce <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff fc3b 	bl	800063c <NRF24_read_register>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000dcc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d013      	beq.n	8000e00 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000dd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d006      	beq.n	8000df2 <printRadioSettings+0x5e>
 8000de4:	f107 0308 	add.w	r3, r7, #8
 8000de8:	49b2      	ldr	r1, [pc, #712]	; (80010b4 <printRadioSettings+0x320>)
 8000dea:	4618      	mov	r0, r3
 8000dec:	f002 ff54 	bl	8003c98 <siprintf>
 8000df0:	e00c      	b.n	8000e0c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	49b0      	ldr	r1, [pc, #704]	; (80010b8 <printRadioSettings+0x324>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f002 ff4d 	bl	8003c98 <siprintf>
 8000dfe:	e005      	b.n	8000e0c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	49ad      	ldr	r1, [pc, #692]	; (80010bc <printRadioSettings+0x328>)
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 ff46 	bl	8003c98 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff f9dd 	bl	80001d0 <strlen>
 8000e16:	4603      	mov	r3, r0
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	f107 0108 	add.w	r1, r7, #8
 8000e1e:	230a      	movs	r3, #10
 8000e20:	48a3      	ldr	r0, [pc, #652]	; (80010b0 <printRadioSettings+0x31c>)
 8000e22:	f002 fc54 	bl	80036ce <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f7ff fc08 	bl	800063c <NRF24_read_register>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e32:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e36:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	bfcc      	ite	gt
 8000e3e:	2301      	movgt	r3, #1
 8000e40:	2300      	movle	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e4a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	bfcc      	ite	gt
 8000e52:	2301      	movgt	r3, #1
 8000e54:	2300      	movle	r3, #0
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e5a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e5e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bfcc      	ite	gt
 8000e66:	2301      	movgt	r3, #1
 8000e68:	2300      	movle	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e72:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	bfcc      	ite	gt
 8000e7a:	2301      	movgt	r3, #1
 8000e7c:	2300      	movle	r3, #0
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e86:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bfcc      	ite	gt
 8000e8e:	2301      	movgt	r3, #1
 8000e90:	2300      	movle	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e96:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e9a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	bfcc      	ite	gt
 8000ea2:	2301      	movgt	r3, #1
 8000ea4:	2300      	movle	r3, #0
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	f107 0008 	add.w	r0, r7, #8
 8000eac:	9303      	str	r3, [sp, #12]
 8000eae:	9402      	str	r4, [sp, #8]
 8000eb0:	9101      	str	r1, [sp, #4]
 8000eb2:	9200      	str	r2, [sp, #0]
 8000eb4:	4633      	mov	r3, r6
 8000eb6:	462a      	mov	r2, r5
 8000eb8:	4981      	ldr	r1, [pc, #516]	; (80010c0 <printRadioSettings+0x32c>)
 8000eba:	f002 feed 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff f984 	bl	80001d0 <strlen>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	f107 0108 	add.w	r1, r7, #8
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	4877      	ldr	r0, [pc, #476]	; (80010b0 <printRadioSettings+0x31c>)
 8000ed4:	f002 fbfb 	bl	80036ce <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f7ff fbaf 	bl	800063c <NRF24_read_register>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ee4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ee8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	bfcc      	ite	gt
 8000ef0:	2301      	movgt	r3, #1
 8000ef2:	2300      	movle	r3, #0
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ef8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000efc:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	bfcc      	ite	gt
 8000f04:	2301      	movgt	r3, #1
 8000f06:	2300      	movle	r3, #0
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f10:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bfcc      	ite	gt
 8000f18:	2301      	movgt	r3, #1
 8000f1a:	2300      	movle	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f20:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f24:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	bfcc      	ite	gt
 8000f2c:	2301      	movgt	r3, #1
 8000f2e:	2300      	movle	r3, #0
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f34:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f38:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	bfcc      	ite	gt
 8000f40:	2301      	movgt	r3, #1
 8000f42:	2300      	movle	r3, #0
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f4c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	bfcc      	ite	gt
 8000f54:	2301      	movgt	r3, #1
 8000f56:	2300      	movle	r3, #0
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f107 0008 	add.w	r0, r7, #8
 8000f5e:	9303      	str	r3, [sp, #12]
 8000f60:	9402      	str	r4, [sp, #8]
 8000f62:	9101      	str	r1, [sp, #4]
 8000f64:	9200      	str	r2, [sp, #0]
 8000f66:	4633      	mov	r3, r6
 8000f68:	462a      	mov	r2, r5
 8000f6a:	4956      	ldr	r1, [pc, #344]	; (80010c4 <printRadioSettings+0x330>)
 8000f6c:	f002 fe94 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff f92b 	bl	80001d0 <strlen>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	f107 0108 	add.w	r1, r7, #8
 8000f82:	230a      	movs	r3, #10
 8000f84:	484a      	ldr	r0, [pc, #296]	; (80010b0 <printRadioSettings+0x31c>)
 8000f86:	f002 fba2 	bl	80036ce <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000f8a:	2003      	movs	r0, #3
 8000f8c:	f7ff fb56 	bl	800063c <NRF24_read_register>
 8000f90:	4603      	mov	r3, r0
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000f9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000fa4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	4946      	ldr	r1, [pc, #280]	; (80010c8 <printRadioSettings+0x334>)
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f002 fe72 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff f909 	bl	80001d0 <strlen>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	f107 0108 	add.w	r1, r7, #8
 8000fc6:	230a      	movs	r3, #10
 8000fc8:	4839      	ldr	r0, [pc, #228]	; (80010b0 <printRadioSettings+0x31c>)
 8000fca:	f002 fb80 	bl	80036ce <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000fce:	2005      	movs	r0, #5
 8000fd0:	f7ff fb34 	bl	800063c <NRF24_read_register>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000fda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	4939      	ldr	r1, [pc, #228]	; (80010cc <printRadioSettings+0x338>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 fe55 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f8ec 	bl	80001d0 <strlen>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	f107 0108 	add.w	r1, r7, #8
 8001000:	230a      	movs	r3, #10
 8001002:	482b      	ldr	r0, [pc, #172]	; (80010b0 <printRadioSettings+0x31c>)
 8001004:	f002 fb63 	bl	80036ce <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001008:	2006      	movs	r0, #6
 800100a:	f7ff fb17 	bl	800063c <NRF24_read_register>
 800100e:	4603      	mov	r3, r0
 8001010:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001014:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	2b00      	cmp	r3, #0
 800101e:	d006      	beq.n	800102e <printRadioSettings+0x29a>
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	492a      	ldr	r1, [pc, #168]	; (80010d0 <printRadioSettings+0x33c>)
 8001026:	4618      	mov	r0, r3
 8001028:	f002 fe36 	bl	8003c98 <siprintf>
 800102c:	e005      	b.n	800103a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	4928      	ldr	r1, [pc, #160]	; (80010d4 <printRadioSettings+0x340>)
 8001034:	4618      	mov	r0, r3
 8001036:	f002 fe2f 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff f8c6 	bl	80001d0 <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	b29a      	uxth	r2, r3
 8001048:	f107 0108 	add.w	r1, r7, #8
 800104c:	230a      	movs	r3, #10
 800104e:	4818      	ldr	r0, [pc, #96]	; (80010b0 <printRadioSettings+0x31c>)
 8001050:	f002 fb3d 	bl	80036ce <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001054:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001058:	f003 0306 	and.w	r3, r3, #6
 800105c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001060:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001064:	085b      	lsrs	r3, r3, #1
 8001066:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800106a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800106e:	2b00      	cmp	r3, #0
 8001070:	d106      	bne.n	8001080 <printRadioSettings+0x2ec>
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4918      	ldr	r1, [pc, #96]	; (80010d8 <printRadioSettings+0x344>)
 8001078:	4618      	mov	r0, r3
 800107a:	f002 fe0d 	bl	8003c98 <siprintf>
 800107e:	e03b      	b.n	80010f8 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001080:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001084:	2b01      	cmp	r3, #1
 8001086:	d106      	bne.n	8001096 <printRadioSettings+0x302>
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	4913      	ldr	r1, [pc, #76]	; (80010dc <printRadioSettings+0x348>)
 800108e:	4618      	mov	r0, r3
 8001090:	f002 fe02 	bl	8003c98 <siprintf>
 8001094:	e030      	b.n	80010f8 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001096:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800109a:	2b02      	cmp	r3, #2
 800109c:	d122      	bne.n	80010e4 <printRadioSettings+0x350>
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	490f      	ldr	r1, [pc, #60]	; (80010e0 <printRadioSettings+0x34c>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 fdf7 	bl	8003c98 <siprintf>
 80010aa:	e025      	b.n	80010f8 <printRadioSettings+0x364>
 80010ac:	080044f0 	.word	0x080044f0
 80010b0:	20000104 	.word	0x20000104
 80010b4:	08004524 	.word	0x08004524
 80010b8:	08004540 	.word	0x08004540
 80010bc:	0800455c 	.word	0x0800455c
 80010c0:	08004570 	.word	0x08004570
 80010c4:	080045b4 	.word	0x080045b4
 80010c8:	08004600 	.word	0x08004600
 80010cc:	0800461c 	.word	0x0800461c
 80010d0:	08004630 	.word	0x08004630
 80010d4:	08004648 	.word	0x08004648
 80010d8:	08004660 	.word	0x08004660
 80010dc:	08004674 	.word	0x08004674
 80010e0:	08004688 	.word	0x08004688
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80010e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d105      	bne.n	80010f8 <printRadioSettings+0x364>
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	49d7      	ldr	r1, [pc, #860]	; (8001450 <printRadioSettings+0x6bc>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 fdd0 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f867 	bl	80001d0 <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	b29a      	uxth	r2, r3
 8001106:	f107 0108 	add.w	r1, r7, #8
 800110a:	230a      	movs	r3, #10
 800110c:	48d1      	ldr	r0, [pc, #836]	; (8001454 <printRadioSettings+0x6c0>)
 800110e:	f002 fade 	bl	80036ce <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001112:	463b      	mov	r3, r7
 8001114:	2205      	movs	r2, #5
 8001116:	4619      	mov	r1, r3
 8001118:	200a      	movs	r0, #10
 800111a:	f7ff fab7 	bl	800068c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800111e:	793b      	ldrb	r3, [r7, #4]
 8001120:	461c      	mov	r4, r3
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	461d      	mov	r5, r3
 8001126:	78bb      	ldrb	r3, [r7, #2]
 8001128:	787a      	ldrb	r2, [r7, #1]
 800112a:	7839      	ldrb	r1, [r7, #0]
 800112c:	f107 0008 	add.w	r0, r7, #8
 8001130:	9102      	str	r1, [sp, #8]
 8001132:	9201      	str	r2, [sp, #4]
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	462b      	mov	r3, r5
 8001138:	4622      	mov	r2, r4
 800113a:	49c7      	ldr	r1, [pc, #796]	; (8001458 <printRadioSettings+0x6c4>)
 800113c:	f002 fdac 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f843 	bl	80001d0 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	b29a      	uxth	r2, r3
 800114e:	f107 0108 	add.w	r1, r7, #8
 8001152:	230a      	movs	r3, #10
 8001154:	48bf      	ldr	r0, [pc, #764]	; (8001454 <printRadioSettings+0x6c0>)
 8001156:	f002 faba 	bl	80036ce <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800115a:	463b      	mov	r3, r7
 800115c:	2205      	movs	r2, #5
 800115e:	4619      	mov	r1, r3
 8001160:	200b      	movs	r0, #11
 8001162:	f7ff fa93 	bl	800068c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001166:	793b      	ldrb	r3, [r7, #4]
 8001168:	461c      	mov	r4, r3
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	461d      	mov	r5, r3
 800116e:	78bb      	ldrb	r3, [r7, #2]
 8001170:	787a      	ldrb	r2, [r7, #1]
 8001172:	7839      	ldrb	r1, [r7, #0]
 8001174:	f107 0008 	add.w	r0, r7, #8
 8001178:	9102      	str	r1, [sp, #8]
 800117a:	9201      	str	r2, [sp, #4]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	462b      	mov	r3, r5
 8001180:	4622      	mov	r2, r4
 8001182:	49b6      	ldr	r1, [pc, #728]	; (800145c <printRadioSettings+0x6c8>)
 8001184:	f002 fd88 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f81f 	bl	80001d0 <strlen>
 8001192:	4603      	mov	r3, r0
 8001194:	b29a      	uxth	r2, r3
 8001196:	f107 0108 	add.w	r1, r7, #8
 800119a:	230a      	movs	r3, #10
 800119c:	48ad      	ldr	r0, [pc, #692]	; (8001454 <printRadioSettings+0x6c0>)
 800119e:	f002 fa96 	bl	80036ce <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80011a2:	463b      	mov	r3, r7
 80011a4:	2201      	movs	r2, #1
 80011a6:	4619      	mov	r1, r3
 80011a8:	200c      	movs	r0, #12
 80011aa:	f7ff fa6f 	bl	800068c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80011ae:	783b      	ldrb	r3, [r7, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	49aa      	ldr	r1, [pc, #680]	; (8001460 <printRadioSettings+0x6cc>)
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fd6d 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f804 	bl	80001d0 <strlen>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	f107 0108 	add.w	r1, r7, #8
 80011d0:	230a      	movs	r3, #10
 80011d2:	48a0      	ldr	r0, [pc, #640]	; (8001454 <printRadioSettings+0x6c0>)
 80011d4:	f002 fa7b 	bl	80036ce <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80011d8:	463b      	mov	r3, r7
 80011da:	2201      	movs	r2, #1
 80011dc:	4619      	mov	r1, r3
 80011de:	200d      	movs	r0, #13
 80011e0:	f7ff fa54 	bl	800068c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80011e4:	783b      	ldrb	r3, [r7, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	499d      	ldr	r1, [pc, #628]	; (8001464 <printRadioSettings+0x6d0>)
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fd52 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7fe ffe9 	bl	80001d0 <strlen>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29a      	uxth	r2, r3
 8001202:	f107 0108 	add.w	r1, r7, #8
 8001206:	230a      	movs	r3, #10
 8001208:	4892      	ldr	r0, [pc, #584]	; (8001454 <printRadioSettings+0x6c0>)
 800120a:	f002 fa60 	bl	80036ce <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800120e:	463b      	mov	r3, r7
 8001210:	2201      	movs	r2, #1
 8001212:	4619      	mov	r1, r3
 8001214:	200e      	movs	r0, #14
 8001216:	f7ff fa39 	bl	800068c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800121a:	783b      	ldrb	r3, [r7, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	4991      	ldr	r1, [pc, #580]	; (8001468 <printRadioSettings+0x6d4>)
 8001224:	4618      	mov	r0, r3
 8001226:	f002 fd37 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	4618      	mov	r0, r3
 8001230:	f7fe ffce 	bl	80001d0 <strlen>
 8001234:	4603      	mov	r3, r0
 8001236:	b29a      	uxth	r2, r3
 8001238:	f107 0108 	add.w	r1, r7, #8
 800123c:	230a      	movs	r3, #10
 800123e:	4885      	ldr	r0, [pc, #532]	; (8001454 <printRadioSettings+0x6c0>)
 8001240:	f002 fa45 	bl	80036ce <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001244:	463b      	mov	r3, r7
 8001246:	2201      	movs	r2, #1
 8001248:	4619      	mov	r1, r3
 800124a:	200f      	movs	r0, #15
 800124c:	f7ff fa1e 	bl	800068c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001250:	783b      	ldrb	r3, [r7, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	4984      	ldr	r1, [pc, #528]	; (800146c <printRadioSettings+0x6d8>)
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fd1c 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	4618      	mov	r0, r3
 8001266:	f7fe ffb3 	bl	80001d0 <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	b29a      	uxth	r2, r3
 800126e:	f107 0108 	add.w	r1, r7, #8
 8001272:	230a      	movs	r3, #10
 8001274:	4877      	ldr	r0, [pc, #476]	; (8001454 <printRadioSettings+0x6c0>)
 8001276:	f002 fa2a 	bl	80036ce <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800127a:	463b      	mov	r3, r7
 800127c:	2205      	movs	r2, #5
 800127e:	4619      	mov	r1, r3
 8001280:	2010      	movs	r0, #16
 8001282:	f7ff fa03 	bl	800068c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001286:	793b      	ldrb	r3, [r7, #4]
 8001288:	461c      	mov	r4, r3
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	461d      	mov	r5, r3
 800128e:	78bb      	ldrb	r3, [r7, #2]
 8001290:	787a      	ldrb	r2, [r7, #1]
 8001292:	7839      	ldrb	r1, [r7, #0]
 8001294:	f107 0008 	add.w	r0, r7, #8
 8001298:	9102      	str	r1, [sp, #8]
 800129a:	9201      	str	r2, [sp, #4]
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	462b      	mov	r3, r5
 80012a0:	4622      	mov	r2, r4
 80012a2:	4973      	ldr	r1, [pc, #460]	; (8001470 <printRadioSettings+0x6dc>)
 80012a4:	f002 fcf8 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7fe ff8f 	bl	80001d0 <strlen>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	f107 0108 	add.w	r1, r7, #8
 80012ba:	230a      	movs	r3, #10
 80012bc:	4865      	ldr	r0, [pc, #404]	; (8001454 <printRadioSettings+0x6c0>)
 80012be:	f002 fa06 	bl	80036ce <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80012c2:	2011      	movs	r0, #17
 80012c4:	f7ff f9ba 	bl	800063c <NRF24_read_register>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80012ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	4966      	ldr	r1, [pc, #408]	; (8001474 <printRadioSettings+0x6e0>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 fcdb 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7fe ff72 	bl	80001d0 <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	f107 0108 	add.w	r1, r7, #8
 80012f4:	230a      	movs	r3, #10
 80012f6:	4857      	ldr	r0, [pc, #348]	; (8001454 <printRadioSettings+0x6c0>)
 80012f8:	f002 f9e9 	bl	80036ce <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80012fc:	2012      	movs	r0, #18
 80012fe:	f7ff f99d 	bl	800063c <NRF24_read_register>
 8001302:	4603      	mov	r3, r0
 8001304:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001308:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800130c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	4958      	ldr	r1, [pc, #352]	; (8001478 <printRadioSettings+0x6e4>)
 8001316:	4618      	mov	r0, r3
 8001318:	f002 fcbe 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	4618      	mov	r0, r3
 8001322:	f7fe ff55 	bl	80001d0 <strlen>
 8001326:	4603      	mov	r3, r0
 8001328:	b29a      	uxth	r2, r3
 800132a:	f107 0108 	add.w	r1, r7, #8
 800132e:	230a      	movs	r3, #10
 8001330:	4848      	ldr	r0, [pc, #288]	; (8001454 <printRadioSettings+0x6c0>)
 8001332:	f002 f9cc 	bl	80036ce <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001336:	2013      	movs	r0, #19
 8001338:	f7ff f980 	bl	800063c <NRF24_read_register>
 800133c:	4603      	mov	r3, r0
 800133e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001342:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001346:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	494b      	ldr	r1, [pc, #300]	; (800147c <printRadioSettings+0x6e8>)
 8001350:	4618      	mov	r0, r3
 8001352:	f002 fca1 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	4618      	mov	r0, r3
 800135c:	f7fe ff38 	bl	80001d0 <strlen>
 8001360:	4603      	mov	r3, r0
 8001362:	b29a      	uxth	r2, r3
 8001364:	f107 0108 	add.w	r1, r7, #8
 8001368:	230a      	movs	r3, #10
 800136a:	483a      	ldr	r0, [pc, #232]	; (8001454 <printRadioSettings+0x6c0>)
 800136c:	f002 f9af 	bl	80036ce <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001370:	2014      	movs	r0, #20
 8001372:	f7ff f963 	bl	800063c <NRF24_read_register>
 8001376:	4603      	mov	r3, r0
 8001378:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800137c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001380:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	493d      	ldr	r1, [pc, #244]	; (8001480 <printRadioSettings+0x6ec>)
 800138a:	4618      	mov	r0, r3
 800138c:	f002 fc84 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001390:	f107 0308 	add.w	r3, r7, #8
 8001394:	4618      	mov	r0, r3
 8001396:	f7fe ff1b 	bl	80001d0 <strlen>
 800139a:	4603      	mov	r3, r0
 800139c:	b29a      	uxth	r2, r3
 800139e:	f107 0108 	add.w	r1, r7, #8
 80013a2:	230a      	movs	r3, #10
 80013a4:	482b      	ldr	r0, [pc, #172]	; (8001454 <printRadioSettings+0x6c0>)
 80013a6:	f002 f992 	bl	80036ce <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 80013aa:	2015      	movs	r0, #21
 80013ac:	f7ff f946 	bl	800063c <NRF24_read_register>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80013b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	4930      	ldr	r1, [pc, #192]	; (8001484 <printRadioSettings+0x6f0>)
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 fc67 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7fe fefe 	bl	80001d0 <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	f107 0108 	add.w	r1, r7, #8
 80013dc:	230a      	movs	r3, #10
 80013de:	481d      	ldr	r0, [pc, #116]	; (8001454 <printRadioSettings+0x6c0>)
 80013e0:	f002 f975 	bl	80036ce <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80013e4:	2016      	movs	r0, #22
 80013e6:	f7ff f929 	bl	800063c <NRF24_read_register>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80013f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	4922      	ldr	r1, [pc, #136]	; (8001488 <printRadioSettings+0x6f4>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 fc4a 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	4618      	mov	r0, r3
 800140a:	f7fe fee1 	bl	80001d0 <strlen>
 800140e:	4603      	mov	r3, r0
 8001410:	b29a      	uxth	r2, r3
 8001412:	f107 0108 	add.w	r1, r7, #8
 8001416:	230a      	movs	r3, #10
 8001418:	480e      	ldr	r0, [pc, #56]	; (8001454 <printRadioSettings+0x6c0>)
 800141a:	f002 f958 	bl	80036ce <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800141e:	201c      	movs	r0, #28
 8001420:	f7ff f90c 	bl	800063c <NRF24_read_register>
 8001424:	4603      	mov	r3, r0
 8001426:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800142a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800142e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001432:	2b00      	cmp	r3, #0
 8001434:	bfcc      	ite	gt
 8001436:	2301      	movgt	r3, #1
 8001438:	2300      	movle	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800143e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001442:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001446:	2b00      	cmp	r3, #0
 8001448:	bfcc      	ite	gt
 800144a:	2301      	movgt	r3, #1
 800144c:	2300      	movle	r3, #0
 800144e:	e01d      	b.n	800148c <printRadioSettings+0x6f8>
 8001450:	0800469c 	.word	0x0800469c
 8001454:	20000104 	.word	0x20000104
 8001458:	080046b0 	.word	0x080046b0
 800145c:	080046e0 	.word	0x080046e0
 8001460:	08004710 	.word	0x08004710
 8001464:	08004738 	.word	0x08004738
 8001468:	08004760 	.word	0x08004760
 800146c:	08004788 	.word	0x08004788
 8001470:	080047b0 	.word	0x080047b0
 8001474:	080047dc 	.word	0x080047dc
 8001478:	080047f8 	.word	0x080047f8
 800147c:	08004814 	.word	0x08004814
 8001480:	08004830 	.word	0x08004830
 8001484:	0800484c 	.word	0x0800484c
 8001488:	08004868 	.word	0x08004868
 800148c:	b2db      	uxtb	r3, r3
 800148e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001490:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001494:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001498:	2b00      	cmp	r3, #0
 800149a:	bfcc      	ite	gt
 800149c:	2301      	movgt	r3, #1
 800149e:	2300      	movle	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80014a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014a8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bfcc      	ite	gt
 80014b0:	2301      	movgt	r3, #1
 80014b2:	2300      	movle	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80014b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014bc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bfcc      	ite	gt
 80014c4:	2301      	movgt	r3, #1
 80014c6:	2300      	movle	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80014cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014d0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	bfcc      	ite	gt
 80014d8:	2301      	movgt	r3, #1
 80014da:	2300      	movle	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f107 0008 	add.w	r0, r7, #8
 80014e2:	9303      	str	r3, [sp, #12]
 80014e4:	9402      	str	r4, [sp, #8]
 80014e6:	9101      	str	r1, [sp, #4]
 80014e8:	9200      	str	r2, [sp, #0]
 80014ea:	4633      	mov	r3, r6
 80014ec:	462a      	mov	r2, r5
 80014ee:	4936      	ldr	r1, [pc, #216]	; (80015c8 <printRadioSettings+0x834>)
 80014f0:	f002 fbd2 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe fe69 	bl	80001d0 <strlen>
 80014fe:	4603      	mov	r3, r0
 8001500:	b29a      	uxth	r2, r3
 8001502:	f107 0108 	add.w	r1, r7, #8
 8001506:	230a      	movs	r3, #10
 8001508:	4830      	ldr	r0, [pc, #192]	; (80015cc <printRadioSettings+0x838>)
 800150a:	f002 f8e0 	bl	80036ce <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800150e:	201d      	movs	r0, #29
 8001510:	f7ff f894 	bl	800063c <NRF24_read_register>
 8001514:	4603      	mov	r3, r0
 8001516:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800151a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	2b00      	cmp	r3, #0
 8001524:	d006      	beq.n	8001534 <printRadioSettings+0x7a0>
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	4929      	ldr	r1, [pc, #164]	; (80015d0 <printRadioSettings+0x83c>)
 800152c:	4618      	mov	r0, r3
 800152e:	f002 fbb3 	bl	8003c98 <siprintf>
 8001532:	e005      	b.n	8001540 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4926      	ldr	r1, [pc, #152]	; (80015d4 <printRadioSettings+0x840>)
 800153a:	4618      	mov	r0, r3
 800153c:	f002 fbac 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe fe43 	bl	80001d0 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	b29a      	uxth	r2, r3
 800154e:	f107 0108 	add.w	r1, r7, #8
 8001552:	230a      	movs	r3, #10
 8001554:	481d      	ldr	r0, [pc, #116]	; (80015cc <printRadioSettings+0x838>)
 8001556:	f002 f8ba 	bl	80036ce <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800155a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <printRadioSettings+0x7e0>
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	491b      	ldr	r1, [pc, #108]	; (80015d8 <printRadioSettings+0x844>)
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fb93 	bl	8003c98 <siprintf>
 8001572:	e005      	b.n	8001580 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	4918      	ldr	r1, [pc, #96]	; (80015dc <printRadioSettings+0x848>)
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fb8c 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe fe23 	bl	80001d0 <strlen>
 800158a:	4603      	mov	r3, r0
 800158c:	b29a      	uxth	r2, r3
 800158e:	f107 0108 	add.w	r1, r7, #8
 8001592:	230a      	movs	r3, #10
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <printRadioSettings+0x838>)
 8001596:	f002 f89a 	bl	80036ce <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	4910      	ldr	r1, [pc, #64]	; (80015e0 <printRadioSettings+0x84c>)
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 fb79 	bl	8003c98 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe fe10 	bl	80001d0 <strlen>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	f107 0108 	add.w	r1, r7, #8
 80015b8:	230a      	movs	r3, #10
 80015ba:	4804      	ldr	r0, [pc, #16]	; (80015cc <printRadioSettings+0x838>)
 80015bc:	f002 f887 	bl	80036ce <HAL_UART_Transmit>
}
 80015c0:	bf00      	nop
 80015c2:	3774      	adds	r7, #116	; 0x74
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c8:	08004884 	.word	0x08004884
 80015cc:	20000104 	.word	0x20000104
 80015d0:	080048d0 	.word	0x080048d0
 80015d4:	080048e8 	.word	0x080048e8
 80015d8:	08004900 	.word	0x08004900
 80015dc:	0800491c 	.word	0x0800491c
 80015e0:	080044f0 	.word	0x080044f0

080015e4 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80015e4:	b084      	sub	sp, #16
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	f107 0c08 	add.w	ip, r7, #8
 80015ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <nrf24_DebugUART_Init+0x2c>)
 80015f4:	4618      	mov	r0, r3
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	2244      	movs	r2, #68	; 0x44
 80015fc:	4619      	mov	r1, r3
 80015fe:	f002 fb35 	bl	8003c6c <memcpy>
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800160a:	b004      	add	sp, #16
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000104 	.word	0x20000104

08001614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001616:	b097      	sub	sp, #92	; 0x5c
 8001618:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161a:	f000 fae9 	bl	8001bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161e:	f000 f845 	bl	80016ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001622:	f000 f90d 	bl	8001840 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001626:	f000 f8ab 	bl	8001780 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800162a:	f000 f8df 	bl	80017ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(CEpin_GPIO_Port, CSNpin_Pin, CEpin_Pin,hspi1);
 800162e:	4c1b      	ldr	r4, [pc, #108]	; (800169c <main+0x88>)
 8001630:	4668      	mov	r0, sp
 8001632:	1d23      	adds	r3, r4, #4
 8001634:	2254      	movs	r2, #84	; 0x54
 8001636:	4619      	mov	r1, r3
 8001638:	f002 fb18 	bl	8003c6c <memcpy>
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001646:	4816      	ldr	r0, [pc, #88]	; (80016a0 <main+0x8c>)
 8001648:	f7ff f8a2 	bl	8000790 <NRF24_begin>
  nrf24_DebugUART_Init(huart2);
 800164c:	4e15      	ldr	r6, [pc, #84]	; (80016a4 <main+0x90>)
 800164e:	466d      	mov	r5, sp
 8001650:	f106 0410 	add.w	r4, r6, #16
 8001654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	602b      	str	r3, [r5, #0]
 8001664:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001668:	f7ff ffbc 	bl	80015e4 <nrf24_DebugUART_Init>

  printRadioSettings();
 800166c:	f7ff fb92 	bl	8000d94 <printRadioSettings>
  //**** TRANSMIT - NO ACK ****//
	NRF24_setAutoAck(true);
 8001670:	2001      	movs	r0, #1
 8001672:	f7ff faa1 	bl	8000bb8 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 8001676:	2034      	movs	r0, #52	; 0x34
 8001678:	f7ff f9f9 	bl	8000a6e <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 800167c:	2020      	movs	r0, #32
 800167e:	f7ff fa0b 	bl	8000a98 <NRF24_setPayloadSize>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <main+0x94>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	2001      	movs	r0, #1
 800168a:	f7ff f987 	bl	800099c <NRF24_openReadingPipe>
	NRF24_enableDynamicPayloads();
 800168e:	f7ff fa49 	bl	8000b24 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 8001692:	f7ff fa19 	bl	8000ac8 <NRF24_enableAckPayload>

	NRF24_startListening();
 8001696:	f7ff f95b 	bl	8000950 <NRF24_startListening>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800169a:	e7fe      	b.n	800169a <main+0x86>
 800169c:	20000188 	.word	0x20000188
 80016a0:	40020400 	.word	0x40020400
 80016a4:	200001e0 	.word	0x200001e0
 80016a8:	20000000 	.word	0x20000000

080016ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b094      	sub	sp, #80	; 0x50
 80016b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	2230      	movs	r2, #48	; 0x30
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f002 fae4 	bl	8003c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <SystemClock_Config+0xcc>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	4a27      	ldr	r2, [pc, #156]	; (8001778 <SystemClock_Config+0xcc>)
 80016da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016de:	6413      	str	r3, [r2, #64]	; 0x40
 80016e0:	4b25      	ldr	r3, [pc, #148]	; (8001778 <SystemClock_Config+0xcc>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	4b22      	ldr	r3, [pc, #136]	; (800177c <SystemClock_Config+0xd0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a21      	ldr	r2, [pc, #132]	; (800177c <SystemClock_Config+0xd0>)
 80016f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <SystemClock_Config+0xd0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001708:	2302      	movs	r3, #2
 800170a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800170c:	2301      	movs	r3, #1
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001710:	2310      	movs	r3, #16
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001714:	2302      	movs	r3, #2
 8001716:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001718:	2300      	movs	r3, #0
 800171a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800171c:	2310      	movs	r3, #16
 800171e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001720:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001724:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001726:	2304      	movs	r3, #4
 8001728:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800172a:	2304      	movs	r3, #4
 800172c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172e:	f107 0320 	add.w	r3, r7, #32
 8001732:	4618      	mov	r0, r3
 8001734:	f000 fd8e 	bl	8002254 <HAL_RCC_OscConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800173e:	f000 f8fd 	bl	800193c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001742:	230f      	movs	r3, #15
 8001744:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001746:	2302      	movs	r3, #2
 8001748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800174e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	2102      	movs	r1, #2
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fff0 	bl	8002744 <HAL_RCC_ClockConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800176a:	f000 f8e7 	bl	800193c <Error_Handler>
  }
}
 800176e:	bf00      	nop
 8001770:	3750      	adds	r7, #80	; 0x50
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	40007000 	.word	0x40007000

08001780 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001784:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <MX_SPI1_Init+0x64>)
 8001786:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <MX_SPI1_Init+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <MX_SPI1_Init+0x64>)
 800178c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001790:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_SPI1_Init+0x64>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <MX_SPI1_Init+0x64>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017b4:	2220      	movs	r2, #32
 80017b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017cc:	220a      	movs	r2, #10
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017d0:	4804      	ldr	r0, [pc, #16]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017d2:	f001 f987 	bl	8002ae4 <HAL_SPI_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017dc:	f000 f8ae 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000188 	.word	0x20000188
 80017e8:	40013000 	.word	0x40013000

080017ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <MX_USART2_UART_Init+0x50>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 80017f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001824:	f001 ff06 	bl	8003634 <HAL_UART_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800182e:	f000 f885 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200001e0 	.word	0x200001e0
 800183c:	40004400 	.word	0x40004400

08001840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b34      	ldr	r3, [pc, #208]	; (800192c <MX_GPIO_Init+0xec>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a33      	ldr	r2, [pc, #204]	; (800192c <MX_GPIO_Init+0xec>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b31      	ldr	r3, [pc, #196]	; (800192c <MX_GPIO_Init+0xec>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b2d      	ldr	r3, [pc, #180]	; (800192c <MX_GPIO_Init+0xec>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a2c      	ldr	r2, [pc, #176]	; (800192c <MX_GPIO_Init+0xec>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b2a      	ldr	r3, [pc, #168]	; (800192c <MX_GPIO_Init+0xec>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b26      	ldr	r3, [pc, #152]	; (800192c <MX_GPIO_Init+0xec>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a25      	ldr	r2, [pc, #148]	; (800192c <MX_GPIO_Init+0xec>)
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b23      	ldr	r3, [pc, #140]	; (800192c <MX_GPIO_Init+0xec>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b1f      	ldr	r3, [pc, #124]	; (800192c <MX_GPIO_Init+0xec>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a1e      	ldr	r2, [pc, #120]	; (800192c <MX_GPIO_Init+0xec>)
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b1c      	ldr	r3, [pc, #112]	; (800192c <MX_GPIO_Init+0xec>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80018cc:	4818      	ldr	r0, [pc, #96]	; (8001930 <MX_GPIO_Init+0xf0>)
 80018ce:	f000 fca7 	bl	8002220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	4813      	ldr	r0, [pc, #76]	; (8001934 <MX_GPIO_Init+0xf4>)
 80018e8:	f000 fafe 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018ec:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80018f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	480a      	ldr	r0, [pc, #40]	; (8001930 <MX_GPIO_Init+0xf0>)
 8001906:	f000 faef 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSNpin_Pin CEpin_Pin */
  GPIO_InitStruct.Pin = CSNpin_Pin|CEpin_Pin;
 800190a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800190e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001910:	2300      	movs	r3, #0
 8001912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	; (8001938 <MX_GPIO_Init+0xf8>)
 8001920:	f000 fae2 	bl	8001ee8 <HAL_GPIO_Init>

}
 8001924:	bf00      	nop
 8001926:	3728      	adds	r7, #40	; 0x28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	40020c00 	.word	0x40020c00
 8001934:	40020800 	.word	0x40020800
 8001938:	40020400 	.word	0x40020400

0800193c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001940:	b672      	cpsid	i
}
 8001942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001944:	e7fe      	b.n	8001944 <Error_Handler+0x8>
	...

08001948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_MspInit+0x4c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <HAL_MspInit+0x4c>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_MspInit+0x4c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_MspInit+0x4c>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a08      	ldr	r2, [pc, #32]	; (8001994 <HAL_MspInit+0x4c>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_MspInit+0x4c>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <HAL_SPI_MspInit+0x84>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d12b      	bne.n	8001a12 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_SPI_MspInit+0x88>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <HAL_SPI_MspInit+0x88>)
 80019c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_SPI_MspInit+0x88>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_SPI_MspInit+0x88>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <HAL_SPI_MspInit+0x88>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_SPI_MspInit+0x88>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019f2:	23e0      	movs	r3, #224	; 0xe0
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a02:	2305      	movs	r3, #5
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	; (8001a24 <HAL_SPI_MspInit+0x8c>)
 8001a0e:	f000 fa6b 	bl	8001ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40013000 	.word	0x40013000
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020000 	.word	0x40020000

08001a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a19      	ldr	r2, [pc, #100]	; (8001aac <HAL_UART_MspInit+0x84>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d12b      	bne.n	8001aa2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_UART_MspInit+0x88>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a17      	ldr	r2, [pc, #92]	; (8001ab0 <HAL_UART_MspInit+0x88>)
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_UART_MspInit+0x88>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_UART_MspInit+0x88>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <HAL_UART_MspInit+0x88>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_UART_MspInit+0x88>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a82:	230c      	movs	r3, #12
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a92:	2307      	movs	r3, #7
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <HAL_UART_MspInit+0x8c>)
 8001a9e:	f000 fa23 	bl	8001ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aa2:	bf00      	nop
 8001aa4:	3728      	adds	r7, #40	; 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40004400 	.word	0x40004400
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020000 	.word	0x40020000

08001ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <NMI_Handler+0x4>

08001abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <HardFault_Handler+0x4>

08001ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <MemManage_Handler+0x4>

08001aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <BusFault_Handler+0x4>

08001ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <UsageFault_Handler+0x4>

08001ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b04:	f000 f8c6 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b14:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <_sbrk+0x5c>)
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <_sbrk+0x60>)
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <_sbrk+0x64>)
 8001b2a:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <_sbrk+0x68>)
 8001b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d207      	bcs.n	8001b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b3c:	f002 f86c 	bl	8003c18 <__errno>
 8001b40:	4603      	mov	r3, r0
 8001b42:	220c      	movs	r2, #12
 8001b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	e009      	b.n	8001b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <_sbrk+0x64>)
 8001b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20020000 	.word	0x20020000
 8001b6c:	00000400 	.word	0x00000400
 8001b70:	20000148 	.word	0x20000148
 8001b74:	20000238 	.word	0x20000238

08001b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <SystemInit+0x20>)
 8001b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b82:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <SystemInit+0x20>)
 8001b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ba2:	490e      	ldr	r1, [pc, #56]	; (8001bdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ba4:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba8:	e002      	b.n	8001bb0 <LoopCopyDataInit>

08001baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bae:	3304      	adds	r3, #4

08001bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb4:	d3f9      	bcc.n	8001baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb6:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bb8:	4c0b      	ldr	r4, [pc, #44]	; (8001be8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bbc:	e001      	b.n	8001bc2 <LoopFillZerobss>

08001bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc0:	3204      	adds	r2, #4

08001bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc4:	d3fb      	bcc.n	8001bbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bc6:	f7ff ffd7 	bl	8001b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bca:	f002 f82b 	bl	8003c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bce:	f7ff fd21 	bl	8001614 <main>
  bx  lr    
 8001bd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bdc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001be0:	08004aa0 	.word	0x08004aa0
  ldr r2, =_sbss
 8001be4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001be8:	20000238 	.word	0x20000238

08001bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC_IRQHandler>
	...

08001bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	; (8001c30 <HAL_Init+0x40>)
 8001bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <HAL_Init+0x40>)
 8001c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_Init+0x40>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <HAL_Init+0x40>)
 8001c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f000 f931 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f000 f808 	bl	8001c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c24:	f7ff fe90 	bl	8001948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023c00 	.word	0x40023c00

08001c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_InitTick+0x54>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x58>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 f93b 	bl	8001ece <HAL_SYSTICK_Config>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00e      	b.n	8001c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b0f      	cmp	r3, #15
 8001c66:	d80a      	bhi.n	8001c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f000 f911 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <HAL_InitTick+0x5c>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20000010 	.word	0x20000010
 8001c90:	2000000c 	.word	0x2000000c

08001c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x20>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000010 	.word	0x20000010
 8001cb8:	20000224 	.word	0x20000224

08001cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_GetTick+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000224 	.word	0x20000224

08001cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff ffee 	bl	8001cbc <HAL_GetTick>
 8001ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cec:	d005      	beq.n	8001cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_Delay+0x44>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cfa:	bf00      	nop
 8001cfc:	f7ff ffde 	bl	8001cbc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d8f7      	bhi.n	8001cfc <HAL_Delay+0x28>
  {
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000010 	.word	0x20000010

08001d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4e:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	60d3      	str	r3, [r2, #12]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <__NVIC_GetPriorityGrouping+0x18>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	f003 0307 	and.w	r3, r3, #7
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db0a      	blt.n	8001daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	; (8001dcc <__NVIC_SetPriority+0x4c>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	440b      	add	r3, r1
 8001da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da8:	e00a      	b.n	8001dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4908      	ldr	r1, [pc, #32]	; (8001dd0 <__NVIC_SetPriority+0x50>)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3b04      	subs	r3, #4
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	761a      	strb	r2, [r3, #24]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f1c3 0307 	rsb	r3, r3, #7
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf28      	it	cs
 8001df2:	2304      	movcs	r3, #4
 8001df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d902      	bls.n	8001e04 <NVIC_EncodePriority+0x30>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	e000      	b.n	8001e06 <NVIC_EncodePriority+0x32>
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	4313      	orrs	r3, r2
         );
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff8e 	bl	8001d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff47 	bl	8001d1c <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff5c 	bl	8001d64 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff8e 	bl	8001dd4 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5d 	bl	8001d80 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ffb0 	bl	8001e3c <SysTick_Config>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	e16b      	b.n	80021dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	f040 815a 	bne.w	80021d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d005      	beq.n	8001f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d130      	bne.n	8001f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	2203      	movs	r2, #3
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f70:	2201      	movs	r2, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 0201 	and.w	r2, r3, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d017      	beq.n	8001fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d123      	bne.n	800202c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	08da      	lsrs	r2, r3, #3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3208      	adds	r2, #8
 8001fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	220f      	movs	r2, #15
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	08da      	lsrs	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3208      	adds	r2, #8
 8002026:	69b9      	ldr	r1, [r7, #24]
 8002028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0203 	and.w	r2, r3, #3
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80b4 	beq.w	80021d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b60      	ldr	r3, [pc, #384]	; (80021f4 <HAL_GPIO_Init+0x30c>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a5f      	ldr	r2, [pc, #380]	; (80021f4 <HAL_GPIO_Init+0x30c>)
 8002078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b5d      	ldr	r3, [pc, #372]	; (80021f4 <HAL_GPIO_Init+0x30c>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800208a:	4a5b      	ldr	r2, [pc, #364]	; (80021f8 <HAL_GPIO_Init+0x310>)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a52      	ldr	r2, [pc, #328]	; (80021fc <HAL_GPIO_Init+0x314>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d02b      	beq.n	800210e <HAL_GPIO_Init+0x226>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a51      	ldr	r2, [pc, #324]	; (8002200 <HAL_GPIO_Init+0x318>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d025      	beq.n	800210a <HAL_GPIO_Init+0x222>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a50      	ldr	r2, [pc, #320]	; (8002204 <HAL_GPIO_Init+0x31c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d01f      	beq.n	8002106 <HAL_GPIO_Init+0x21e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4f      	ldr	r2, [pc, #316]	; (8002208 <HAL_GPIO_Init+0x320>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d019      	beq.n	8002102 <HAL_GPIO_Init+0x21a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4e      	ldr	r2, [pc, #312]	; (800220c <HAL_GPIO_Init+0x324>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d013      	beq.n	80020fe <HAL_GPIO_Init+0x216>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4d      	ldr	r2, [pc, #308]	; (8002210 <HAL_GPIO_Init+0x328>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00d      	beq.n	80020fa <HAL_GPIO_Init+0x212>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4c      	ldr	r2, [pc, #304]	; (8002214 <HAL_GPIO_Init+0x32c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d007      	beq.n	80020f6 <HAL_GPIO_Init+0x20e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4b      	ldr	r2, [pc, #300]	; (8002218 <HAL_GPIO_Init+0x330>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d101      	bne.n	80020f2 <HAL_GPIO_Init+0x20a>
 80020ee:	2307      	movs	r3, #7
 80020f0:	e00e      	b.n	8002110 <HAL_GPIO_Init+0x228>
 80020f2:	2308      	movs	r3, #8
 80020f4:	e00c      	b.n	8002110 <HAL_GPIO_Init+0x228>
 80020f6:	2306      	movs	r3, #6
 80020f8:	e00a      	b.n	8002110 <HAL_GPIO_Init+0x228>
 80020fa:	2305      	movs	r3, #5
 80020fc:	e008      	b.n	8002110 <HAL_GPIO_Init+0x228>
 80020fe:	2304      	movs	r3, #4
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x228>
 8002102:	2303      	movs	r3, #3
 8002104:	e004      	b.n	8002110 <HAL_GPIO_Init+0x228>
 8002106:	2302      	movs	r3, #2
 8002108:	e002      	b.n	8002110 <HAL_GPIO_Init+0x228>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_GPIO_Init+0x228>
 800210e:	2300      	movs	r3, #0
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	f002 0203 	and.w	r2, r2, #3
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	4093      	lsls	r3, r2
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002120:	4935      	ldr	r1, [pc, #212]	; (80021f8 <HAL_GPIO_Init+0x310>)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	3302      	adds	r3, #2
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800212e:	4b3b      	ldr	r3, [pc, #236]	; (800221c <HAL_GPIO_Init+0x334>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002152:	4a32      	ldr	r2, [pc, #200]	; (800221c <HAL_GPIO_Init+0x334>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002158:	4b30      	ldr	r3, [pc, #192]	; (800221c <HAL_GPIO_Init+0x334>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800217c:	4a27      	ldr	r2, [pc, #156]	; (800221c <HAL_GPIO_Init+0x334>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002182:	4b26      	ldr	r3, [pc, #152]	; (800221c <HAL_GPIO_Init+0x334>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021a6:	4a1d      	ldr	r2, [pc, #116]	; (800221c <HAL_GPIO_Init+0x334>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021ac:	4b1b      	ldr	r3, [pc, #108]	; (800221c <HAL_GPIO_Init+0x334>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d0:	4a12      	ldr	r2, [pc, #72]	; (800221c <HAL_GPIO_Init+0x334>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3301      	adds	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b0f      	cmp	r3, #15
 80021e0:	f67f ae90 	bls.w	8001f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3724      	adds	r7, #36	; 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40013800 	.word	0x40013800
 80021fc:	40020000 	.word	0x40020000
 8002200:	40020400 	.word	0x40020400
 8002204:	40020800 	.word	0x40020800
 8002208:	40020c00 	.word	0x40020c00
 800220c:	40021000 	.word	0x40021000
 8002210:	40021400 	.word	0x40021400
 8002214:	40021800 	.word	0x40021800
 8002218:	40021c00 	.word	0x40021c00
 800221c:	40013c00 	.word	0x40013c00

08002220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]
 800222c:	4613      	mov	r3, r2
 800222e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002230:	787b      	ldrb	r3, [r7, #1]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800223c:	e003      	b.n	8002246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	041a      	lsls	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	619a      	str	r2, [r3, #24]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e264      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d075      	beq.n	800235e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002272:	4ba3      	ldr	r3, [pc, #652]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b04      	cmp	r3, #4
 800227c:	d00c      	beq.n	8002298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227e:	4ba0      	ldr	r3, [pc, #640]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002286:	2b08      	cmp	r3, #8
 8002288:	d112      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228a:	4b9d      	ldr	r3, [pc, #628]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002296:	d10b      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	4b99      	ldr	r3, [pc, #612]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d05b      	beq.n	800235c <HAL_RCC_OscConfig+0x108>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d157      	bne.n	800235c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e23f      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d106      	bne.n	80022c8 <HAL_RCC_OscConfig+0x74>
 80022ba:	4b91      	ldr	r3, [pc, #580]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a90      	ldr	r2, [pc, #576]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e01d      	b.n	8002304 <HAL_RCC_OscConfig+0xb0>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x98>
 80022d2:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a8a      	ldr	r2, [pc, #552]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a87      	ldr	r2, [pc, #540]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e00b      	b.n	8002304 <HAL_RCC_OscConfig+0xb0>
 80022ec:	4b84      	ldr	r3, [pc, #528]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a83      	ldr	r2, [pc, #524]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b81      	ldr	r3, [pc, #516]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a80      	ldr	r2, [pc, #512]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d013      	beq.n	8002334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff fcd6 	bl	8001cbc <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002314:	f7ff fcd2 	bl	8001cbc <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e204      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0xc0>
 8002332:	e014      	b.n	800235e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7ff fcc2 	bl	8001cbc <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800233c:	f7ff fcbe 	bl	8001cbc <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1f0      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	4b6c      	ldr	r3, [pc, #432]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0xe8>
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d063      	beq.n	8002432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800236a:	4b65      	ldr	r3, [pc, #404]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00b      	beq.n	800238e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002376:	4b62      	ldr	r3, [pc, #392]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800237e:	2b08      	cmp	r3, #8
 8002380:	d11c      	bne.n	80023bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002382:	4b5f      	ldr	r3, [pc, #380]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d116      	bne.n	80023bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	4b5c      	ldr	r3, [pc, #368]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_RCC_OscConfig+0x152>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e1c4      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	4b56      	ldr	r3, [pc, #344]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4952      	ldr	r1, [pc, #328]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ba:	e03a      	b.n	8002432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c4:	4b4f      	ldr	r3, [pc, #316]	; (8002504 <HAL_RCC_OscConfig+0x2b0>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7ff fc77 	bl	8001cbc <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d2:	f7ff fc73 	bl	8001cbc <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e1a5      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	4b46      	ldr	r3, [pc, #280]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f0:	4b43      	ldr	r3, [pc, #268]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4940      	ldr	r1, [pc, #256]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
 8002404:	e015      	b.n	8002432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002406:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_RCC_OscConfig+0x2b0>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7ff fc56 	bl	8001cbc <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002414:	f7ff fc52 	bl	8001cbc <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e184      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	4b36      	ldr	r3, [pc, #216]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d030      	beq.n	80024a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d016      	beq.n	8002474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002446:	4b30      	ldr	r3, [pc, #192]	; (8002508 <HAL_RCC_OscConfig+0x2b4>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7ff fc36 	bl	8001cbc <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002454:	f7ff fc32 	bl	8001cbc <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e164      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x200>
 8002472:	e015      	b.n	80024a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCC_OscConfig+0x2b4>)
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247a:	f7ff fc1f 	bl	8001cbc <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002482:	f7ff fc1b 	bl	8001cbc <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e14d      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f0      	bne.n	8002482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80a0 	beq.w	80025ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10f      	bne.n	80024de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024da:	2301      	movs	r3, #1
 80024dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d121      	bne.n	800252e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7ff fbe1 	bl	8001cbc <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	e011      	b.n	8002522 <HAL_RCC_OscConfig+0x2ce>
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	42470000 	.word	0x42470000
 8002508:	42470e80 	.word	0x42470e80
 800250c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002510:	f7ff fbd4 	bl	8001cbc <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e106      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	4b85      	ldr	r3, [pc, #532]	; (8002738 <HAL_RCC_OscConfig+0x4e4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x2f0>
 8002536:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a80      	ldr	r2, [pc, #512]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	e01c      	b.n	800257e <HAL_RCC_OscConfig+0x32a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_OscConfig+0x312>
 800254c:	4b7b      	ldr	r3, [pc, #492]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	4a7a      	ldr	r2, [pc, #488]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	6713      	str	r3, [r2, #112]	; 0x70
 8002558:	4b78      	ldr	r3, [pc, #480]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	4a77      	ldr	r2, [pc, #476]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6713      	str	r3, [r2, #112]	; 0x70
 8002564:	e00b      	b.n	800257e <HAL_RCC_OscConfig+0x32a>
 8002566:	4b75      	ldr	r3, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	4a74      	ldr	r2, [pc, #464]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
 8002572:	4b72      	ldr	r3, [pc, #456]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	4a71      	ldr	r2, [pc, #452]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d015      	beq.n	80025b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002586:	f7ff fb99 	bl	8001cbc <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7ff fb95 	bl	8001cbc <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0c5      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	4b65      	ldr	r3, [pc, #404]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ee      	beq.n	800258e <HAL_RCC_OscConfig+0x33a>
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7ff fb83 	bl	8001cbc <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7ff fb7f 	bl	8001cbc <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0af      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	4b5a      	ldr	r3, [pc, #360]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ee      	bne.n	80025ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e2:	4b56      	ldr	r3, [pc, #344]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a55      	ldr	r2, [pc, #340]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 809b 	beq.w	800272e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f8:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d05c      	beq.n	80026be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d141      	bne.n	8002690 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_RCC_OscConfig+0x4ec>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7ff fb53 	bl	8001cbc <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261a:	f7ff fb4f 	bl	8001cbc <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e081      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262c:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69da      	ldr	r2, [r3, #28]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	019b      	lsls	r3, r3, #6
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	3b01      	subs	r3, #1
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	061b      	lsls	r3, r3, #24
 800265c:	4937      	ldr	r1, [pc, #220]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002662:	4b37      	ldr	r3, [pc, #220]	; (8002740 <HAL_RCC_OscConfig+0x4ec>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff fb28 	bl	8001cbc <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002670:	f7ff fb24 	bl	8001cbc <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e056      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x41c>
 800268e:	e04e      	b.n	800272e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_RCC_OscConfig+0x4ec>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7ff fb11 	bl	8001cbc <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269e:	f7ff fb0d 	bl	8001cbc <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e03f      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b0:	4b22      	ldr	r3, [pc, #136]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0x44a>
 80026bc:	e037      	b.n	800272e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e032      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026ca:	4b1c      	ldr	r3, [pc, #112]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d028      	beq.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d121      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d11a      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026fa:	4013      	ands	r3, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002700:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002702:	4293      	cmp	r3, r2
 8002704:	d111      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	085b      	lsrs	r3, r3, #1
 8002712:	3b01      	subs	r3, #1
 8002714:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d107      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40007000 	.word	0x40007000
 800273c:	40023800 	.word	0x40023800
 8002740:	42470060 	.word	0x42470060

08002744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0cc      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002758:	4b68      	ldr	r3, [pc, #416]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d90c      	bls.n	8002780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b65      	ldr	r3, [pc, #404]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b63      	ldr	r3, [pc, #396]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0b8      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d020      	beq.n	80027ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002798:	4b59      	ldr	r3, [pc, #356]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a58      	ldr	r2, [pc, #352]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b0:	4b53      	ldr	r3, [pc, #332]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a52      	ldr	r2, [pc, #328]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b50      	ldr	r3, [pc, #320]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	494d      	ldr	r1, [pc, #308]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d044      	beq.n	8002864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	4b47      	ldr	r3, [pc, #284]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d119      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e07f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002802:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e067      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f023 0203 	bic.w	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4934      	ldr	r1, [pc, #208]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002834:	f7ff fa42 	bl	8001cbc <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	e00a      	b.n	8002852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	f7ff fa3e 	bl	8001cbc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e04f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 020c 	and.w	r2, r3, #12
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	429a      	cmp	r2, r3
 8002862:	d1eb      	bne.n	800283c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d20c      	bcs.n	800288c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b22      	ldr	r3, [pc, #136]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e032      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4916      	ldr	r1, [pc, #88]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	490e      	ldr	r1, [pc, #56]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ca:	f000 f821 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80028ce:	4602      	mov	r2, r0
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	490a      	ldr	r1, [pc, #40]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	5ccb      	ldrb	r3, [r1, r3]
 80028de:	fa22 f303 	lsr.w	r3, r2, r3
 80028e2:	4a09      	ldr	r2, [pc, #36]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff f9a2 	bl	8001c34 <HAL_InitTick>

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023c00 	.word	0x40023c00
 8002900:	40023800 	.word	0x40023800
 8002904:	08004a44 	.word	0x08004a44
 8002908:	20000008 	.word	0x20000008
 800290c:	2000000c 	.word	0x2000000c

08002910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002910:	b5b0      	push	{r4, r5, r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002916:	2100      	movs	r1, #0
 8002918:	6079      	str	r1, [r7, #4]
 800291a:	2100      	movs	r1, #0
 800291c:	60f9      	str	r1, [r7, #12]
 800291e:	2100      	movs	r1, #0
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002922:	2100      	movs	r1, #0
 8002924:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002926:	4952      	ldr	r1, [pc, #328]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002928:	6889      	ldr	r1, [r1, #8]
 800292a:	f001 010c 	and.w	r1, r1, #12
 800292e:	2908      	cmp	r1, #8
 8002930:	d00d      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x3e>
 8002932:	2908      	cmp	r1, #8
 8002934:	f200 8094 	bhi.w	8002a60 <HAL_RCC_GetSysClockFreq+0x150>
 8002938:	2900      	cmp	r1, #0
 800293a:	d002      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0x32>
 800293c:	2904      	cmp	r1, #4
 800293e:	d003      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x38>
 8002940:	e08e      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002942:	4b4c      	ldr	r3, [pc, #304]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x164>)
 8002944:	60bb      	str	r3, [r7, #8]
       break;
 8002946:	e08e      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002948:	4b4b      	ldr	r3, [pc, #300]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x168>)
 800294a:	60bb      	str	r3, [r7, #8]
      break;
 800294c:	e08b      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800294e:	4948      	ldr	r1, [pc, #288]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002950:	6849      	ldr	r1, [r1, #4]
 8002952:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002956:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002958:	4945      	ldr	r1, [pc, #276]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x160>)
 800295a:	6849      	ldr	r1, [r1, #4]
 800295c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002960:	2900      	cmp	r1, #0
 8002962:	d024      	beq.n	80029ae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002964:	4942      	ldr	r1, [pc, #264]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002966:	6849      	ldr	r1, [r1, #4]
 8002968:	0989      	lsrs	r1, r1, #6
 800296a:	4608      	mov	r0, r1
 800296c:	f04f 0100 	mov.w	r1, #0
 8002970:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002974:	f04f 0500 	mov.w	r5, #0
 8002978:	ea00 0204 	and.w	r2, r0, r4
 800297c:	ea01 0305 	and.w	r3, r1, r5
 8002980:	493d      	ldr	r1, [pc, #244]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x168>)
 8002982:	fb01 f003 	mul.w	r0, r1, r3
 8002986:	2100      	movs	r1, #0
 8002988:	fb01 f102 	mul.w	r1, r1, r2
 800298c:	1844      	adds	r4, r0, r1
 800298e:	493a      	ldr	r1, [pc, #232]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x168>)
 8002990:	fba2 0101 	umull	r0, r1, r2, r1
 8002994:	1863      	adds	r3, r4, r1
 8002996:	4619      	mov	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	461a      	mov	r2, r3
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	f7fd fc6e 	bl	8000280 <__aeabi_uldivmod>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4613      	mov	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	e04a      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ae:	4b30      	ldr	r3, [pc, #192]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	099b      	lsrs	r3, r3, #6
 80029b4:	461a      	mov	r2, r3
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029be:	f04f 0100 	mov.w	r1, #0
 80029c2:	ea02 0400 	and.w	r4, r2, r0
 80029c6:	ea03 0501 	and.w	r5, r3, r1
 80029ca:	4620      	mov	r0, r4
 80029cc:	4629      	mov	r1, r5
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	014b      	lsls	r3, r1, #5
 80029d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029dc:	0142      	lsls	r2, r0, #5
 80029de:	4610      	mov	r0, r2
 80029e0:	4619      	mov	r1, r3
 80029e2:	1b00      	subs	r0, r0, r4
 80029e4:	eb61 0105 	sbc.w	r1, r1, r5
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	f04f 0300 	mov.w	r3, #0
 80029f0:	018b      	lsls	r3, r1, #6
 80029f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029f6:	0182      	lsls	r2, r0, #6
 80029f8:	1a12      	subs	r2, r2, r0
 80029fa:	eb63 0301 	sbc.w	r3, r3, r1
 80029fe:	f04f 0000 	mov.w	r0, #0
 8002a02:	f04f 0100 	mov.w	r1, #0
 8002a06:	00d9      	lsls	r1, r3, #3
 8002a08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a0c:	00d0      	lsls	r0, r2, #3
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	1912      	adds	r2, r2, r4
 8002a14:	eb45 0303 	adc.w	r3, r5, r3
 8002a18:	f04f 0000 	mov.w	r0, #0
 8002a1c:	f04f 0100 	mov.w	r1, #0
 8002a20:	0299      	lsls	r1, r3, #10
 8002a22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a26:	0290      	lsls	r0, r2, #10
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f7fd fc22 	bl	8000280 <__aeabi_uldivmod>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4613      	mov	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	60bb      	str	r3, [r7, #8]
      break;
 8002a5e:	e002      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a62:	60bb      	str	r3, [r7, #8]
      break;
 8002a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a66:	68bb      	ldr	r3, [r7, #8]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a70:	40023800 	.word	0x40023800
 8002a74:	00f42400 	.word	0x00f42400
 8002a78:	017d7840 	.word	0x017d7840

08002a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000008 	.word	0x20000008

08002a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a98:	f7ff fff0 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	0a9b      	lsrs	r3, r3, #10
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	4903      	ldr	r1, [pc, #12]	; (8002ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aaa:	5ccb      	ldrb	r3, [r1, r3]
 8002aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	08004a54 	.word	0x08004a54

08002abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ac0:	f7ff ffdc 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	0b5b      	lsrs	r3, r3, #13
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	4903      	ldr	r1, [pc, #12]	; (8002ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad2:	5ccb      	ldrb	r3, [r1, r3]
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	08004a54 	.word	0x08004a54

08002ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e07b      	b.n	8002bee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d108      	bne.n	8002b10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b06:	d009      	beq.n	8002b1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	61da      	str	r2, [r3, #28]
 8002b0e:	e005      	b.n	8002b1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fe ff2e 	bl	8001998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba0:	ea42 0103 	orr.w	r1, r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	0c1b      	lsrs	r3, r3, #16
 8002bba:	f003 0104 	and.w	r1, r3, #4
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	f003 0210 	and.w	r2, r3, #16
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69da      	ldr	r2, [r3, #28]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b088      	sub	sp, #32
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_SPI_Transmit+0x22>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e126      	b.n	8002e66 <HAL_SPI_Transmit+0x270>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c20:	f7ff f84c 	bl	8001cbc <HAL_GetTick>
 8002c24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d002      	beq.n	8002c3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c36:	2302      	movs	r3, #2
 8002c38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c3a:	e10b      	b.n	8002e54 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <HAL_SPI_Transmit+0x52>
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d102      	bne.n	8002c4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c4c:	e102      	b.n	8002e54 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2203      	movs	r2, #3
 8002c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	88fa      	ldrh	r2, [r7, #6]
 8002c66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	88fa      	ldrh	r2, [r7, #6]
 8002c6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c94:	d10f      	bne.n	8002cb6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ca4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	d007      	beq.n	8002cd4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cdc:	d14b      	bne.n	8002d76 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_SPI_Transmit+0xf6>
 8002ce6:	8afb      	ldrh	r3, [r7, #22]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d13e      	bne.n	8002d6a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	881a      	ldrh	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	1c9a      	adds	r2, r3, #2
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d10:	e02b      	b.n	8002d6a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d112      	bne.n	8002d46 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	881a      	ldrh	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	1c9a      	adds	r2, r3, #2
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d44:	e011      	b.n	8002d6a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d46:	f7fe ffb9 	bl	8001cbc <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d803      	bhi.n	8002d5e <HAL_SPI_Transmit+0x168>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d102      	bne.n	8002d64 <HAL_SPI_Transmit+0x16e>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d102      	bne.n	8002d6a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d68:	e074      	b.n	8002e54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1ce      	bne.n	8002d12 <HAL_SPI_Transmit+0x11c>
 8002d74:	e04c      	b.n	8002e10 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <HAL_SPI_Transmit+0x18e>
 8002d7e:	8afb      	ldrh	r3, [r7, #22]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d140      	bne.n	8002e06 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	7812      	ldrb	r2, [r2, #0]
 8002d90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002daa:	e02c      	b.n	8002e06 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d113      	bne.n	8002de2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	7812      	ldrb	r2, [r2, #0]
 8002dc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	86da      	strh	r2, [r3, #54]	; 0x36
 8002de0:	e011      	b.n	8002e06 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002de2:	f7fe ff6b 	bl	8001cbc <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d803      	bhi.n	8002dfa <HAL_SPI_Transmit+0x204>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d102      	bne.n	8002e00 <HAL_SPI_Transmit+0x20a>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e04:	e026      	b.n	8002e54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1cd      	bne.n	8002dac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	6839      	ldr	r1, [r7, #0]
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 fbcb 	bl	80035b0 <SPI_EndRxTxTransaction>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	77fb      	strb	r3, [r7, #31]
 8002e50:	e000      	b.n	8002e54 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002e52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e64:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b088      	sub	sp, #32
 8002e72:	af02      	add	r7, sp, #8
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e8a:	d112      	bne.n	8002eb2 <HAL_SPI_Receive+0x44>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10e      	bne.n	8002eb2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2204      	movs	r2, #4
 8002e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f8f1 	bl	8003090 <HAL_SPI_TransmitReceive>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	e0ea      	b.n	8003088 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_SPI_Receive+0x52>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e0e3      	b.n	8003088 <HAL_SPI_Receive+0x21a>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ec8:	f7fe fef8 	bl	8001cbc <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d002      	beq.n	8002ee0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002eda:	2302      	movs	r3, #2
 8002edc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ede:	e0ca      	b.n	8003076 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_SPI_Receive+0x7e>
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ef0:	e0c1      	b.n	8003076 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	88fa      	ldrh	r2, [r7, #6]
 8002f0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	88fa      	ldrh	r2, [r7, #6]
 8002f10:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f38:	d10f      	bne.n	8002f5a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f58:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f64:	2b40      	cmp	r3, #64	; 0x40
 8002f66:	d007      	beq.n	8002f78 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f76:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d162      	bne.n	8003046 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f80:	e02e      	b.n	8002fe0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d115      	bne.n	8002fbc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f103 020c 	add.w	r2, r3, #12
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	7812      	ldrb	r2, [r2, #0]
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fba:	e011      	b.n	8002fe0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fbc:	f7fe fe7e 	bl	8001cbc <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d803      	bhi.n	8002fd4 <HAL_SPI_Receive+0x166>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd2:	d102      	bne.n	8002fda <HAL_SPI_Receive+0x16c>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d102      	bne.n	8002fe0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fde:	e04a      	b.n	8003076 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1cb      	bne.n	8002f82 <HAL_SPI_Receive+0x114>
 8002fea:	e031      	b.n	8003050 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d113      	bne.n	8003022 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	b292      	uxth	r2, r2
 8003006:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	1c9a      	adds	r2, r3, #2
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003020:	e011      	b.n	8003046 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003022:	f7fe fe4b 	bl	8001cbc <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d803      	bhi.n	800303a <HAL_SPI_Receive+0x1cc>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d102      	bne.n	8003040 <HAL_SPI_Receive+0x1d2>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d102      	bne.n	8003046 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003044:	e017      	b.n	8003076 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1cd      	bne.n	8002fec <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	6839      	ldr	r1, [r7, #0]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fa45 	bl	80034e4 <SPI_EndRxTransaction>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	75fb      	strb	r3, [r7, #23]
 8003072:	e000      	b.n	8003076 <HAL_SPI_Receive+0x208>
  }

error :
 8003074:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003086:	7dfb      	ldrb	r3, [r7, #23]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800309e:	2301      	movs	r3, #1
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_SPI_TransmitReceive+0x26>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e18a      	b.n	80033cc <HAL_SPI_TransmitReceive+0x33c>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030be:	f7fe fdfd 	bl	8001cbc <HAL_GetTick>
 80030c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030d4:	887b      	ldrh	r3, [r7, #2]
 80030d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d00f      	beq.n	8003100 <HAL_SPI_TransmitReceive+0x70>
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e6:	d107      	bne.n	80030f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d103      	bne.n	80030f8 <HAL_SPI_TransmitReceive+0x68>
 80030f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d003      	beq.n	8003100 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
 80030fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fe:	e15b      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_SPI_TransmitReceive+0x82>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <HAL_SPI_TransmitReceive+0x82>
 800310c:	887b      	ldrh	r3, [r7, #2]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d103      	bne.n	800311a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003118:	e14e      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b04      	cmp	r3, #4
 8003124:	d003      	beq.n	800312e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2205      	movs	r2, #5
 800312a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	887a      	ldrh	r2, [r7, #2]
 800313e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	887a      	ldrh	r2, [r7, #2]
 8003144:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	887a      	ldrh	r2, [r7, #2]
 8003150:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	887a      	ldrh	r2, [r7, #2]
 8003156:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b40      	cmp	r3, #64	; 0x40
 8003170:	d007      	beq.n	8003182 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003180:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800318a:	d178      	bne.n	800327e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <HAL_SPI_TransmitReceive+0x10a>
 8003194:	8b7b      	ldrh	r3, [r7, #26]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d166      	bne.n	8003268 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	881a      	ldrh	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	1c9a      	adds	r2, r3, #2
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031be:	e053      	b.n	8003268 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d11b      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x176>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d016      	beq.n	8003206 <HAL_SPI_TransmitReceive+0x176>
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d113      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	881a      	ldrh	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	1c9a      	adds	r2, r3, #2
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d119      	bne.n	8003248 <HAL_SPI_TransmitReceive+0x1b8>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d014      	beq.n	8003248 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	b292      	uxth	r2, r2
 800322a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	1c9a      	adds	r2, r3, #2
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003244:	2301      	movs	r3, #1
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003248:	f7fe fd38 	bl	8001cbc <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003254:	429a      	cmp	r2, r3
 8003256:	d807      	bhi.n	8003268 <HAL_SPI_TransmitReceive+0x1d8>
 8003258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325e:	d003      	beq.n	8003268 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003266:	e0a7      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1a6      	bne.n	80031c0 <HAL_SPI_TransmitReceive+0x130>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1a1      	bne.n	80031c0 <HAL_SPI_TransmitReceive+0x130>
 800327c:	e07c      	b.n	8003378 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <HAL_SPI_TransmitReceive+0x1fc>
 8003286:	8b7b      	ldrh	r3, [r7, #26]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d16b      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	330c      	adds	r3, #12
 8003296:	7812      	ldrb	r2, [r2, #0]
 8003298:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b2:	e057      	b.n	8003364 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d11c      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x26c>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d017      	beq.n	80032fc <HAL_SPI_TransmitReceive+0x26c>
 80032cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d114      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	330c      	adds	r3, #12
 80032dc:	7812      	ldrb	r2, [r2, #0]
 80032de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d119      	bne.n	800333e <HAL_SPI_TransmitReceive+0x2ae>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d014      	beq.n	800333e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800333a:	2301      	movs	r3, #1
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800333e:	f7fe fcbd 	bl	8001cbc <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800334a:	429a      	cmp	r2, r3
 800334c:	d803      	bhi.n	8003356 <HAL_SPI_TransmitReceive+0x2c6>
 800334e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d102      	bne.n	800335c <HAL_SPI_TransmitReceive+0x2cc>
 8003356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003358:	2b00      	cmp	r3, #0
 800335a:	d103      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003362:	e029      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1a2      	bne.n	80032b4 <HAL_SPI_TransmitReceive+0x224>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d19d      	bne.n	80032b4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f917 	bl	80035b0 <SPI_EndRxTxTransaction>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d006      	beq.n	8003396 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003394:	e010      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10b      	bne.n	80033b6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	e000      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3730      	adds	r7, #48	; 0x30
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033e4:	f7fe fc6a 	bl	8001cbc <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	4413      	add	r3, r2
 80033f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033f4:	f7fe fc62 	bl	8001cbc <HAL_GetTick>
 80033f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033fa:	4b39      	ldr	r3, [pc, #228]	; (80034e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	015b      	lsls	r3, r3, #5
 8003400:	0d1b      	lsrs	r3, r3, #20
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	fb02 f303 	mul.w	r3, r2, r3
 8003408:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800340a:	e054      	b.n	80034b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d050      	beq.n	80034b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003414:	f7fe fc52 	bl	8001cbc <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	429a      	cmp	r2, r3
 8003422:	d902      	bls.n	800342a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d13d      	bne.n	80034a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003438:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003442:	d111      	bne.n	8003468 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344c:	d004      	beq.n	8003458 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003456:	d107      	bne.n	8003468 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003466:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003470:	d10f      	bne.n	8003492 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003490:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e017      	b.n	80034d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4013      	ands	r3, r2
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	bf0c      	ite	eq
 80034c6:	2301      	moveq	r3, #1
 80034c8:	2300      	movne	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d19b      	bne.n	800340c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3720      	adds	r7, #32
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000008 	.word	0x20000008

080034e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034f8:	d111      	bne.n	800351e <SPI_EndRxTransaction+0x3a>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003502:	d004      	beq.n	800350e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350c:	d107      	bne.n	800351e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800351c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003526:	d12a      	bne.n	800357e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003530:	d012      	beq.n	8003558 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2200      	movs	r2, #0
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f7ff ff49 	bl	80033d4 <SPI_WaitFlagStateUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d02d      	beq.n	80035a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354c:	f043 0220 	orr.w	r2, r3, #32
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e026      	b.n	80035a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2200      	movs	r2, #0
 8003560:	2101      	movs	r1, #1
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f7ff ff36 	bl	80033d4 <SPI_WaitFlagStateUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d01a      	beq.n	80035a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	f043 0220 	orr.w	r2, r3, #32
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e013      	b.n	80035a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2200      	movs	r2, #0
 8003586:	2101      	movs	r1, #1
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f7ff ff23 	bl	80033d4 <SPI_WaitFlagStateUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d007      	beq.n	80035a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	f043 0220 	orr.w	r2, r3, #32
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e000      	b.n	80035a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <SPI_EndRxTxTransaction+0x7c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1b      	ldr	r2, [pc, #108]	; (8003630 <SPI_EndRxTxTransaction+0x80>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	0d5b      	lsrs	r3, r3, #21
 80035c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035cc:	fb02 f303 	mul.w	r3, r2, r3
 80035d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035da:	d112      	bne.n	8003602 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2200      	movs	r2, #0
 80035e4:	2180      	movs	r1, #128	; 0x80
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f7ff fef4 	bl	80033d4 <SPI_WaitFlagStateUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d016      	beq.n	8003620 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f6:	f043 0220 	orr.w	r2, r3, #32
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e00f      	b.n	8003622 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	3b01      	subs	r3, #1
 800360c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003618:	2b80      	cmp	r3, #128	; 0x80
 800361a:	d0f2      	beq.n	8003602 <SPI_EndRxTxTransaction+0x52>
 800361c:	e000      	b.n	8003620 <SPI_EndRxTxTransaction+0x70>
        break;
 800361e:	bf00      	nop
  }

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000008 	.word	0x20000008
 8003630:	165e9f81 	.word	0x165e9f81

08003634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e03f      	b.n	80036c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fe f9e4 	bl	8001a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2224      	movs	r2, #36	; 0x24
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f905 	bl	8003888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800368c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800369c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b08a      	sub	sp, #40	; 0x28
 80036d2:	af02      	add	r7, sp, #8
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	603b      	str	r3, [r7, #0]
 80036da:	4613      	mov	r3, r2
 80036dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d17c      	bne.n	80037e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_UART_Transmit+0x2c>
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e075      	b.n	80037ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_UART_Transmit+0x3e>
 8003708:	2302      	movs	r3, #2
 800370a:	e06e      	b.n	80037ea <HAL_UART_Transmit+0x11c>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2221      	movs	r2, #33	; 0x21
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003722:	f7fe facb 	bl	8001cbc <HAL_GetTick>
 8003726:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	88fa      	ldrh	r2, [r7, #6]
 800372c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	88fa      	ldrh	r2, [r7, #6]
 8003732:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373c:	d108      	bne.n	8003750 <HAL_UART_Transmit+0x82>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d104      	bne.n	8003750 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	e003      	b.n	8003758 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003754:	2300      	movs	r3, #0
 8003756:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003760:	e02a      	b.n	80037b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	2180      	movs	r1, #128	; 0x80
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f840 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e036      	b.n	80037ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10b      	bne.n	800379a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003790:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	3302      	adds	r3, #2
 8003796:	61bb      	str	r3, [r7, #24]
 8003798:	e007      	b.n	80037aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	781a      	ldrb	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	3301      	adds	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1cf      	bne.n	8003762 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2200      	movs	r2, #0
 80037ca:	2140      	movs	r1, #64	; 0x40
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f810 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e006      	b.n	80037ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e000      	b.n	80037ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	4613      	mov	r3, r2
 8003800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003802:	e02c      	b.n	800385e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d028      	beq.n	800385e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <UART_WaitOnFlagUntilTimeout+0x30>
 8003812:	f7fe fa53 	bl	8001cbc <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	429a      	cmp	r2, r3
 8003820:	d21d      	bcs.n	800385e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003830:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e00f      	b.n	800387e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4013      	ands	r3, r2
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	429a      	cmp	r2, r3
 800386c:	bf0c      	ite	eq
 800386e:	2301      	moveq	r3, #1
 8003870:	2300      	movne	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	429a      	cmp	r2, r3
 800387a:	d0c3      	beq.n	8003804 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388c:	b09f      	sub	sp, #124	; 0x7c
 800388e:	af00      	add	r7, sp, #0
 8003890:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800389c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389e:	68d9      	ldr	r1, [r3, #12]
 80038a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	ea40 0301 	orr.w	r3, r0, r1
 80038a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	4313      	orrs	r3, r2
 80038c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80038c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038cc:	f021 010c 	bic.w	r1, r1, #12
 80038d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038d6:	430b      	orrs	r3, r1
 80038d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e6:	6999      	ldr	r1, [r3, #24]
 80038e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	ea40 0301 	orr.w	r3, r0, r1
 80038f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4bc5      	ldr	r3, [pc, #788]	; (8003c0c <UART_SetConfig+0x384>)
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d004      	beq.n	8003906 <UART_SetConfig+0x7e>
 80038fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4bc3      	ldr	r3, [pc, #780]	; (8003c10 <UART_SetConfig+0x388>)
 8003902:	429a      	cmp	r2, r3
 8003904:	d103      	bne.n	800390e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003906:	f7ff f8d9 	bl	8002abc <HAL_RCC_GetPCLK2Freq>
 800390a:	6778      	str	r0, [r7, #116]	; 0x74
 800390c:	e002      	b.n	8003914 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800390e:	f7ff f8c1 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8003912:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391c:	f040 80b6 	bne.w	8003a8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003922:	461c      	mov	r4, r3
 8003924:	f04f 0500 	mov.w	r5, #0
 8003928:	4622      	mov	r2, r4
 800392a:	462b      	mov	r3, r5
 800392c:	1891      	adds	r1, r2, r2
 800392e:	6439      	str	r1, [r7, #64]	; 0x40
 8003930:	415b      	adcs	r3, r3
 8003932:	647b      	str	r3, [r7, #68]	; 0x44
 8003934:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003938:	1912      	adds	r2, r2, r4
 800393a:	eb45 0303 	adc.w	r3, r5, r3
 800393e:	f04f 0000 	mov.w	r0, #0
 8003942:	f04f 0100 	mov.w	r1, #0
 8003946:	00d9      	lsls	r1, r3, #3
 8003948:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800394c:	00d0      	lsls	r0, r2, #3
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	1911      	adds	r1, r2, r4
 8003954:	6639      	str	r1, [r7, #96]	; 0x60
 8003956:	416b      	adcs	r3, r5
 8003958:	667b      	str	r3, [r7, #100]	; 0x64
 800395a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	461a      	mov	r2, r3
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	1891      	adds	r1, r2, r2
 8003966:	63b9      	str	r1, [r7, #56]	; 0x38
 8003968:	415b      	adcs	r3, r3
 800396a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800396c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003970:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003974:	f7fc fc84 	bl	8000280 <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4ba5      	ldr	r3, [pc, #660]	; (8003c14 <UART_SetConfig+0x38c>)
 800397e:	fba3 2302 	umull	r2, r3, r3, r2
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	011e      	lsls	r6, r3, #4
 8003986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003988:	461c      	mov	r4, r3
 800398a:	f04f 0500 	mov.w	r5, #0
 800398e:	4622      	mov	r2, r4
 8003990:	462b      	mov	r3, r5
 8003992:	1891      	adds	r1, r2, r2
 8003994:	6339      	str	r1, [r7, #48]	; 0x30
 8003996:	415b      	adcs	r3, r3
 8003998:	637b      	str	r3, [r7, #52]	; 0x34
 800399a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800399e:	1912      	adds	r2, r2, r4
 80039a0:	eb45 0303 	adc.w	r3, r5, r3
 80039a4:	f04f 0000 	mov.w	r0, #0
 80039a8:	f04f 0100 	mov.w	r1, #0
 80039ac:	00d9      	lsls	r1, r3, #3
 80039ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039b2:	00d0      	lsls	r0, r2, #3
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	1911      	adds	r1, r2, r4
 80039ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80039bc:	416b      	adcs	r3, r5
 80039be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	461a      	mov	r2, r3
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	1891      	adds	r1, r2, r2
 80039cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80039ce:	415b      	adcs	r3, r3
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80039da:	f7fc fc51 	bl	8000280 <__aeabi_uldivmod>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4b8c      	ldr	r3, [pc, #560]	; (8003c14 <UART_SetConfig+0x38c>)
 80039e4:	fba3 1302 	umull	r1, r3, r3, r2
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	2164      	movs	r1, #100	; 0x64
 80039ec:	fb01 f303 	mul.w	r3, r1, r3
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	3332      	adds	r3, #50	; 0x32
 80039f6:	4a87      	ldr	r2, [pc, #540]	; (8003c14 <UART_SetConfig+0x38c>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a04:	441e      	add	r6, r3
 8003a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f04f 0100 	mov.w	r1, #0
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	1894      	adds	r4, r2, r2
 8003a14:	623c      	str	r4, [r7, #32]
 8003a16:	415b      	adcs	r3, r3
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a1e:	1812      	adds	r2, r2, r0
 8003a20:	eb41 0303 	adc.w	r3, r1, r3
 8003a24:	f04f 0400 	mov.w	r4, #0
 8003a28:	f04f 0500 	mov.w	r5, #0
 8003a2c:	00dd      	lsls	r5, r3, #3
 8003a2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a32:	00d4      	lsls	r4, r2, #3
 8003a34:	4622      	mov	r2, r4
 8003a36:	462b      	mov	r3, r5
 8003a38:	1814      	adds	r4, r2, r0
 8003a3a:	653c      	str	r4, [r7, #80]	; 0x50
 8003a3c:	414b      	adcs	r3, r1
 8003a3e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	461a      	mov	r2, r3
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	1891      	adds	r1, r2, r2
 8003a4c:	61b9      	str	r1, [r7, #24]
 8003a4e:	415b      	adcs	r3, r3
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003a5a:	f7fc fc11 	bl	8000280 <__aeabi_uldivmod>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4b6c      	ldr	r3, [pc, #432]	; (8003c14 <UART_SetConfig+0x38c>)
 8003a64:	fba3 1302 	umull	r1, r3, r3, r2
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	2164      	movs	r1, #100	; 0x64
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	3332      	adds	r3, #50	; 0x32
 8003a76:	4a67      	ldr	r2, [pc, #412]	; (8003c14 <UART_SetConfig+0x38c>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	f003 0207 	and.w	r2, r3, #7
 8003a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4432      	add	r2, r6
 8003a88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a8a:	e0b9      	b.n	8003c00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a8e:	461c      	mov	r4, r3
 8003a90:	f04f 0500 	mov.w	r5, #0
 8003a94:	4622      	mov	r2, r4
 8003a96:	462b      	mov	r3, r5
 8003a98:	1891      	adds	r1, r2, r2
 8003a9a:	6139      	str	r1, [r7, #16]
 8003a9c:	415b      	adcs	r3, r3
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003aa4:	1912      	adds	r2, r2, r4
 8003aa6:	eb45 0303 	adc.w	r3, r5, r3
 8003aaa:	f04f 0000 	mov.w	r0, #0
 8003aae:	f04f 0100 	mov.w	r1, #0
 8003ab2:	00d9      	lsls	r1, r3, #3
 8003ab4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ab8:	00d0      	lsls	r0, r2, #3
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	eb12 0804 	adds.w	r8, r2, r4
 8003ac2:	eb43 0905 	adc.w	r9, r3, r5
 8003ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f04f 0100 	mov.w	r1, #0
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	008b      	lsls	r3, r1, #2
 8003ada:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ade:	0082      	lsls	r2, r0, #2
 8003ae0:	4640      	mov	r0, r8
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	f7fc fbcc 	bl	8000280 <__aeabi_uldivmod>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4b49      	ldr	r3, [pc, #292]	; (8003c14 <UART_SetConfig+0x38c>)
 8003aee:	fba3 2302 	umull	r2, r3, r3, r2
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	011e      	lsls	r6, r3, #4
 8003af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003af8:	4618      	mov	r0, r3
 8003afa:	f04f 0100 	mov.w	r1, #0
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	1894      	adds	r4, r2, r2
 8003b04:	60bc      	str	r4, [r7, #8]
 8003b06:	415b      	adcs	r3, r3
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b0e:	1812      	adds	r2, r2, r0
 8003b10:	eb41 0303 	adc.w	r3, r1, r3
 8003b14:	f04f 0400 	mov.w	r4, #0
 8003b18:	f04f 0500 	mov.w	r5, #0
 8003b1c:	00dd      	lsls	r5, r3, #3
 8003b1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b22:	00d4      	lsls	r4, r2, #3
 8003b24:	4622      	mov	r2, r4
 8003b26:	462b      	mov	r3, r5
 8003b28:	1814      	adds	r4, r2, r0
 8003b2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003b2c:	414b      	adcs	r3, r1
 8003b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f04f 0100 	mov.w	r1, #0
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	008b      	lsls	r3, r1, #2
 8003b44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b48:	0082      	lsls	r2, r0, #2
 8003b4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003b4e:	f7fc fb97 	bl	8000280 <__aeabi_uldivmod>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4b2f      	ldr	r3, [pc, #188]	; (8003c14 <UART_SetConfig+0x38c>)
 8003b58:	fba3 1302 	umull	r1, r3, r3, r2
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	2164      	movs	r1, #100	; 0x64
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	3332      	adds	r3, #50	; 0x32
 8003b6a:	4a2a      	ldr	r2, [pc, #168]	; (8003c14 <UART_SetConfig+0x38c>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b76:	441e      	add	r6, r3
 8003b78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f04f 0100 	mov.w	r1, #0
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	1894      	adds	r4, r2, r2
 8003b86:	603c      	str	r4, [r7, #0]
 8003b88:	415b      	adcs	r3, r3
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b90:	1812      	adds	r2, r2, r0
 8003b92:	eb41 0303 	adc.w	r3, r1, r3
 8003b96:	f04f 0400 	mov.w	r4, #0
 8003b9a:	f04f 0500 	mov.w	r5, #0
 8003b9e:	00dd      	lsls	r5, r3, #3
 8003ba0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ba4:	00d4      	lsls	r4, r2, #3
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	462b      	mov	r3, r5
 8003baa:	eb12 0a00 	adds.w	sl, r2, r0
 8003bae:	eb43 0b01 	adc.w	fp, r3, r1
 8003bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f04f 0100 	mov.w	r1, #0
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	008b      	lsls	r3, r1, #2
 8003bc6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bca:	0082      	lsls	r2, r0, #2
 8003bcc:	4650      	mov	r0, sl
 8003bce:	4659      	mov	r1, fp
 8003bd0:	f7fc fb56 	bl	8000280 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <UART_SetConfig+0x38c>)
 8003bda:	fba3 1302 	umull	r1, r3, r3, r2
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	2164      	movs	r1, #100	; 0x64
 8003be2:	fb01 f303 	mul.w	r3, r1, r3
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	3332      	adds	r3, #50	; 0x32
 8003bec:	4a09      	ldr	r2, [pc, #36]	; (8003c14 <UART_SetConfig+0x38c>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	f003 020f 	and.w	r2, r3, #15
 8003bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4432      	add	r2, r6
 8003bfe:	609a      	str	r2, [r3, #8]
}
 8003c00:	bf00      	nop
 8003c02:	377c      	adds	r7, #124	; 0x7c
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40011000 	.word	0x40011000
 8003c10:	40011400 	.word	0x40011400
 8003c14:	51eb851f 	.word	0x51eb851f

08003c18 <__errno>:
 8003c18:	4b01      	ldr	r3, [pc, #4]	; (8003c20 <__errno+0x8>)
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000014 	.word	0x20000014

08003c24 <__libc_init_array>:
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	4d0d      	ldr	r5, [pc, #52]	; (8003c5c <__libc_init_array+0x38>)
 8003c28:	4c0d      	ldr	r4, [pc, #52]	; (8003c60 <__libc_init_array+0x3c>)
 8003c2a:	1b64      	subs	r4, r4, r5
 8003c2c:	10a4      	asrs	r4, r4, #2
 8003c2e:	2600      	movs	r6, #0
 8003c30:	42a6      	cmp	r6, r4
 8003c32:	d109      	bne.n	8003c48 <__libc_init_array+0x24>
 8003c34:	4d0b      	ldr	r5, [pc, #44]	; (8003c64 <__libc_init_array+0x40>)
 8003c36:	4c0c      	ldr	r4, [pc, #48]	; (8003c68 <__libc_init_array+0x44>)
 8003c38:	f000 fc4e 	bl	80044d8 <_init>
 8003c3c:	1b64      	subs	r4, r4, r5
 8003c3e:	10a4      	asrs	r4, r4, #2
 8003c40:	2600      	movs	r6, #0
 8003c42:	42a6      	cmp	r6, r4
 8003c44:	d105      	bne.n	8003c52 <__libc_init_array+0x2e>
 8003c46:	bd70      	pop	{r4, r5, r6, pc}
 8003c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c4c:	4798      	blx	r3
 8003c4e:	3601      	adds	r6, #1
 8003c50:	e7ee      	b.n	8003c30 <__libc_init_array+0xc>
 8003c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c56:	4798      	blx	r3
 8003c58:	3601      	adds	r6, #1
 8003c5a:	e7f2      	b.n	8003c42 <__libc_init_array+0x1e>
 8003c5c:	08004a98 	.word	0x08004a98
 8003c60:	08004a98 	.word	0x08004a98
 8003c64:	08004a98 	.word	0x08004a98
 8003c68:	08004a9c 	.word	0x08004a9c

08003c6c <memcpy>:
 8003c6c:	440a      	add	r2, r1
 8003c6e:	4291      	cmp	r1, r2
 8003c70:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c74:	d100      	bne.n	8003c78 <memcpy+0xc>
 8003c76:	4770      	bx	lr
 8003c78:	b510      	push	{r4, lr}
 8003c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c82:	4291      	cmp	r1, r2
 8003c84:	d1f9      	bne.n	8003c7a <memcpy+0xe>
 8003c86:	bd10      	pop	{r4, pc}

08003c88 <memset>:
 8003c88:	4402      	add	r2, r0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d100      	bne.n	8003c92 <memset+0xa>
 8003c90:	4770      	bx	lr
 8003c92:	f803 1b01 	strb.w	r1, [r3], #1
 8003c96:	e7f9      	b.n	8003c8c <memset+0x4>

08003c98 <siprintf>:
 8003c98:	b40e      	push	{r1, r2, r3}
 8003c9a:	b500      	push	{lr}
 8003c9c:	b09c      	sub	sp, #112	; 0x70
 8003c9e:	ab1d      	add	r3, sp, #116	; 0x74
 8003ca0:	9002      	str	r0, [sp, #8]
 8003ca2:	9006      	str	r0, [sp, #24]
 8003ca4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ca8:	4809      	ldr	r0, [pc, #36]	; (8003cd0 <siprintf+0x38>)
 8003caa:	9107      	str	r1, [sp, #28]
 8003cac:	9104      	str	r1, [sp, #16]
 8003cae:	4909      	ldr	r1, [pc, #36]	; (8003cd4 <siprintf+0x3c>)
 8003cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cb4:	9105      	str	r1, [sp, #20]
 8003cb6:	6800      	ldr	r0, [r0, #0]
 8003cb8:	9301      	str	r3, [sp, #4]
 8003cba:	a902      	add	r1, sp, #8
 8003cbc:	f000 f868 	bl	8003d90 <_svfiprintf_r>
 8003cc0:	9b02      	ldr	r3, [sp, #8]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	b01c      	add	sp, #112	; 0x70
 8003cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ccc:	b003      	add	sp, #12
 8003cce:	4770      	bx	lr
 8003cd0:	20000014 	.word	0x20000014
 8003cd4:	ffff0208 	.word	0xffff0208

08003cd8 <__ssputs_r>:
 8003cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cdc:	688e      	ldr	r6, [r1, #8]
 8003cde:	429e      	cmp	r6, r3
 8003ce0:	4682      	mov	sl, r0
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	4690      	mov	r8, r2
 8003ce6:	461f      	mov	r7, r3
 8003ce8:	d838      	bhi.n	8003d5c <__ssputs_r+0x84>
 8003cea:	898a      	ldrh	r2, [r1, #12]
 8003cec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cf0:	d032      	beq.n	8003d58 <__ssputs_r+0x80>
 8003cf2:	6825      	ldr	r5, [r4, #0]
 8003cf4:	6909      	ldr	r1, [r1, #16]
 8003cf6:	eba5 0901 	sub.w	r9, r5, r1
 8003cfa:	6965      	ldr	r5, [r4, #20]
 8003cfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d04:	3301      	adds	r3, #1
 8003d06:	444b      	add	r3, r9
 8003d08:	106d      	asrs	r5, r5, #1
 8003d0a:	429d      	cmp	r5, r3
 8003d0c:	bf38      	it	cc
 8003d0e:	461d      	movcc	r5, r3
 8003d10:	0553      	lsls	r3, r2, #21
 8003d12:	d531      	bpl.n	8003d78 <__ssputs_r+0xa0>
 8003d14:	4629      	mov	r1, r5
 8003d16:	f000 fb39 	bl	800438c <_malloc_r>
 8003d1a:	4606      	mov	r6, r0
 8003d1c:	b950      	cbnz	r0, 8003d34 <__ssputs_r+0x5c>
 8003d1e:	230c      	movs	r3, #12
 8003d20:	f8ca 3000 	str.w	r3, [sl]
 8003d24:	89a3      	ldrh	r3, [r4, #12]
 8003d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d2a:	81a3      	strh	r3, [r4, #12]
 8003d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d34:	6921      	ldr	r1, [r4, #16]
 8003d36:	464a      	mov	r2, r9
 8003d38:	f7ff ff98 	bl	8003c6c <memcpy>
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d46:	81a3      	strh	r3, [r4, #12]
 8003d48:	6126      	str	r6, [r4, #16]
 8003d4a:	6165      	str	r5, [r4, #20]
 8003d4c:	444e      	add	r6, r9
 8003d4e:	eba5 0509 	sub.w	r5, r5, r9
 8003d52:	6026      	str	r6, [r4, #0]
 8003d54:	60a5      	str	r5, [r4, #8]
 8003d56:	463e      	mov	r6, r7
 8003d58:	42be      	cmp	r6, r7
 8003d5a:	d900      	bls.n	8003d5e <__ssputs_r+0x86>
 8003d5c:	463e      	mov	r6, r7
 8003d5e:	4632      	mov	r2, r6
 8003d60:	6820      	ldr	r0, [r4, #0]
 8003d62:	4641      	mov	r1, r8
 8003d64:	f000 faa8 	bl	80042b8 <memmove>
 8003d68:	68a3      	ldr	r3, [r4, #8]
 8003d6a:	6822      	ldr	r2, [r4, #0]
 8003d6c:	1b9b      	subs	r3, r3, r6
 8003d6e:	4432      	add	r2, r6
 8003d70:	60a3      	str	r3, [r4, #8]
 8003d72:	6022      	str	r2, [r4, #0]
 8003d74:	2000      	movs	r0, #0
 8003d76:	e7db      	b.n	8003d30 <__ssputs_r+0x58>
 8003d78:	462a      	mov	r2, r5
 8003d7a:	f000 fb61 	bl	8004440 <_realloc_r>
 8003d7e:	4606      	mov	r6, r0
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d1e1      	bne.n	8003d48 <__ssputs_r+0x70>
 8003d84:	6921      	ldr	r1, [r4, #16]
 8003d86:	4650      	mov	r0, sl
 8003d88:	f000 fab0 	bl	80042ec <_free_r>
 8003d8c:	e7c7      	b.n	8003d1e <__ssputs_r+0x46>
	...

08003d90 <_svfiprintf_r>:
 8003d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d94:	4698      	mov	r8, r3
 8003d96:	898b      	ldrh	r3, [r1, #12]
 8003d98:	061b      	lsls	r3, r3, #24
 8003d9a:	b09d      	sub	sp, #116	; 0x74
 8003d9c:	4607      	mov	r7, r0
 8003d9e:	460d      	mov	r5, r1
 8003da0:	4614      	mov	r4, r2
 8003da2:	d50e      	bpl.n	8003dc2 <_svfiprintf_r+0x32>
 8003da4:	690b      	ldr	r3, [r1, #16]
 8003da6:	b963      	cbnz	r3, 8003dc2 <_svfiprintf_r+0x32>
 8003da8:	2140      	movs	r1, #64	; 0x40
 8003daa:	f000 faef 	bl	800438c <_malloc_r>
 8003dae:	6028      	str	r0, [r5, #0]
 8003db0:	6128      	str	r0, [r5, #16]
 8003db2:	b920      	cbnz	r0, 8003dbe <_svfiprintf_r+0x2e>
 8003db4:	230c      	movs	r3, #12
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbc:	e0d1      	b.n	8003f62 <_svfiprintf_r+0x1d2>
 8003dbe:	2340      	movs	r3, #64	; 0x40
 8003dc0:	616b      	str	r3, [r5, #20]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8003dc6:	2320      	movs	r3, #32
 8003dc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dd0:	2330      	movs	r3, #48	; 0x30
 8003dd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003f7c <_svfiprintf_r+0x1ec>
 8003dd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dda:	f04f 0901 	mov.w	r9, #1
 8003dde:	4623      	mov	r3, r4
 8003de0:	469a      	mov	sl, r3
 8003de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003de6:	b10a      	cbz	r2, 8003dec <_svfiprintf_r+0x5c>
 8003de8:	2a25      	cmp	r2, #37	; 0x25
 8003dea:	d1f9      	bne.n	8003de0 <_svfiprintf_r+0x50>
 8003dec:	ebba 0b04 	subs.w	fp, sl, r4
 8003df0:	d00b      	beq.n	8003e0a <_svfiprintf_r+0x7a>
 8003df2:	465b      	mov	r3, fp
 8003df4:	4622      	mov	r2, r4
 8003df6:	4629      	mov	r1, r5
 8003df8:	4638      	mov	r0, r7
 8003dfa:	f7ff ff6d 	bl	8003cd8 <__ssputs_r>
 8003dfe:	3001      	adds	r0, #1
 8003e00:	f000 80aa 	beq.w	8003f58 <_svfiprintf_r+0x1c8>
 8003e04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e06:	445a      	add	r2, fp
 8003e08:	9209      	str	r2, [sp, #36]	; 0x24
 8003e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 80a2 	beq.w	8003f58 <_svfiprintf_r+0x1c8>
 8003e14:	2300      	movs	r3, #0
 8003e16:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e1e:	f10a 0a01 	add.w	sl, sl, #1
 8003e22:	9304      	str	r3, [sp, #16]
 8003e24:	9307      	str	r3, [sp, #28]
 8003e26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e2a:	931a      	str	r3, [sp, #104]	; 0x68
 8003e2c:	4654      	mov	r4, sl
 8003e2e:	2205      	movs	r2, #5
 8003e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e34:	4851      	ldr	r0, [pc, #324]	; (8003f7c <_svfiprintf_r+0x1ec>)
 8003e36:	f7fc f9d3 	bl	80001e0 <memchr>
 8003e3a:	9a04      	ldr	r2, [sp, #16]
 8003e3c:	b9d8      	cbnz	r0, 8003e76 <_svfiprintf_r+0xe6>
 8003e3e:	06d0      	lsls	r0, r2, #27
 8003e40:	bf44      	itt	mi
 8003e42:	2320      	movmi	r3, #32
 8003e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e48:	0711      	lsls	r1, r2, #28
 8003e4a:	bf44      	itt	mi
 8003e4c:	232b      	movmi	r3, #43	; 0x2b
 8003e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e52:	f89a 3000 	ldrb.w	r3, [sl]
 8003e56:	2b2a      	cmp	r3, #42	; 0x2a
 8003e58:	d015      	beq.n	8003e86 <_svfiprintf_r+0xf6>
 8003e5a:	9a07      	ldr	r2, [sp, #28]
 8003e5c:	4654      	mov	r4, sl
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f04f 0c0a 	mov.w	ip, #10
 8003e64:	4621      	mov	r1, r4
 8003e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e6a:	3b30      	subs	r3, #48	; 0x30
 8003e6c:	2b09      	cmp	r3, #9
 8003e6e:	d94e      	bls.n	8003f0e <_svfiprintf_r+0x17e>
 8003e70:	b1b0      	cbz	r0, 8003ea0 <_svfiprintf_r+0x110>
 8003e72:	9207      	str	r2, [sp, #28]
 8003e74:	e014      	b.n	8003ea0 <_svfiprintf_r+0x110>
 8003e76:	eba0 0308 	sub.w	r3, r0, r8
 8003e7a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	9304      	str	r3, [sp, #16]
 8003e82:	46a2      	mov	sl, r4
 8003e84:	e7d2      	b.n	8003e2c <_svfiprintf_r+0x9c>
 8003e86:	9b03      	ldr	r3, [sp, #12]
 8003e88:	1d19      	adds	r1, r3, #4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	9103      	str	r1, [sp, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bfbb      	ittet	lt
 8003e92:	425b      	neglt	r3, r3
 8003e94:	f042 0202 	orrlt.w	r2, r2, #2
 8003e98:	9307      	strge	r3, [sp, #28]
 8003e9a:	9307      	strlt	r3, [sp, #28]
 8003e9c:	bfb8      	it	lt
 8003e9e:	9204      	strlt	r2, [sp, #16]
 8003ea0:	7823      	ldrb	r3, [r4, #0]
 8003ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ea4:	d10c      	bne.n	8003ec0 <_svfiprintf_r+0x130>
 8003ea6:	7863      	ldrb	r3, [r4, #1]
 8003ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8003eaa:	d135      	bne.n	8003f18 <_svfiprintf_r+0x188>
 8003eac:	9b03      	ldr	r3, [sp, #12]
 8003eae:	1d1a      	adds	r2, r3, #4
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	9203      	str	r2, [sp, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bfb8      	it	lt
 8003eb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ebc:	3402      	adds	r4, #2
 8003ebe:	9305      	str	r3, [sp, #20]
 8003ec0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f8c <_svfiprintf_r+0x1fc>
 8003ec4:	7821      	ldrb	r1, [r4, #0]
 8003ec6:	2203      	movs	r2, #3
 8003ec8:	4650      	mov	r0, sl
 8003eca:	f7fc f989 	bl	80001e0 <memchr>
 8003ece:	b140      	cbz	r0, 8003ee2 <_svfiprintf_r+0x152>
 8003ed0:	2340      	movs	r3, #64	; 0x40
 8003ed2:	eba0 000a 	sub.w	r0, r0, sl
 8003ed6:	fa03 f000 	lsl.w	r0, r3, r0
 8003eda:	9b04      	ldr	r3, [sp, #16]
 8003edc:	4303      	orrs	r3, r0
 8003ede:	3401      	adds	r4, #1
 8003ee0:	9304      	str	r3, [sp, #16]
 8003ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee6:	4826      	ldr	r0, [pc, #152]	; (8003f80 <_svfiprintf_r+0x1f0>)
 8003ee8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eec:	2206      	movs	r2, #6
 8003eee:	f7fc f977 	bl	80001e0 <memchr>
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	d038      	beq.n	8003f68 <_svfiprintf_r+0x1d8>
 8003ef6:	4b23      	ldr	r3, [pc, #140]	; (8003f84 <_svfiprintf_r+0x1f4>)
 8003ef8:	bb1b      	cbnz	r3, 8003f42 <_svfiprintf_r+0x1b2>
 8003efa:	9b03      	ldr	r3, [sp, #12]
 8003efc:	3307      	adds	r3, #7
 8003efe:	f023 0307 	bic.w	r3, r3, #7
 8003f02:	3308      	adds	r3, #8
 8003f04:	9303      	str	r3, [sp, #12]
 8003f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f08:	4433      	add	r3, r6
 8003f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f0c:	e767      	b.n	8003dde <_svfiprintf_r+0x4e>
 8003f0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f12:	460c      	mov	r4, r1
 8003f14:	2001      	movs	r0, #1
 8003f16:	e7a5      	b.n	8003e64 <_svfiprintf_r+0xd4>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	3401      	adds	r4, #1
 8003f1c:	9305      	str	r3, [sp, #20]
 8003f1e:	4619      	mov	r1, r3
 8003f20:	f04f 0c0a 	mov.w	ip, #10
 8003f24:	4620      	mov	r0, r4
 8003f26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f2a:	3a30      	subs	r2, #48	; 0x30
 8003f2c:	2a09      	cmp	r2, #9
 8003f2e:	d903      	bls.n	8003f38 <_svfiprintf_r+0x1a8>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0c5      	beq.n	8003ec0 <_svfiprintf_r+0x130>
 8003f34:	9105      	str	r1, [sp, #20]
 8003f36:	e7c3      	b.n	8003ec0 <_svfiprintf_r+0x130>
 8003f38:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f3c:	4604      	mov	r4, r0
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e7f0      	b.n	8003f24 <_svfiprintf_r+0x194>
 8003f42:	ab03      	add	r3, sp, #12
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	462a      	mov	r2, r5
 8003f48:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <_svfiprintf_r+0x1f8>)
 8003f4a:	a904      	add	r1, sp, #16
 8003f4c:	4638      	mov	r0, r7
 8003f4e:	f3af 8000 	nop.w
 8003f52:	1c42      	adds	r2, r0, #1
 8003f54:	4606      	mov	r6, r0
 8003f56:	d1d6      	bne.n	8003f06 <_svfiprintf_r+0x176>
 8003f58:	89ab      	ldrh	r3, [r5, #12]
 8003f5a:	065b      	lsls	r3, r3, #25
 8003f5c:	f53f af2c 	bmi.w	8003db8 <_svfiprintf_r+0x28>
 8003f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f62:	b01d      	add	sp, #116	; 0x74
 8003f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f68:	ab03      	add	r3, sp, #12
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	462a      	mov	r2, r5
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <_svfiprintf_r+0x1f8>)
 8003f70:	a904      	add	r1, sp, #16
 8003f72:	4638      	mov	r0, r7
 8003f74:	f000 f87a 	bl	800406c <_printf_i>
 8003f78:	e7eb      	b.n	8003f52 <_svfiprintf_r+0x1c2>
 8003f7a:	bf00      	nop
 8003f7c:	08004a5c 	.word	0x08004a5c
 8003f80:	08004a66 	.word	0x08004a66
 8003f84:	00000000 	.word	0x00000000
 8003f88:	08003cd9 	.word	0x08003cd9
 8003f8c:	08004a62 	.word	0x08004a62

08003f90 <_printf_common>:
 8003f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f94:	4616      	mov	r6, r2
 8003f96:	4699      	mov	r9, r3
 8003f98:	688a      	ldr	r2, [r1, #8]
 8003f9a:	690b      	ldr	r3, [r1, #16]
 8003f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	bfb8      	it	lt
 8003fa4:	4613      	movlt	r3, r2
 8003fa6:	6033      	str	r3, [r6, #0]
 8003fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fac:	4607      	mov	r7, r0
 8003fae:	460c      	mov	r4, r1
 8003fb0:	b10a      	cbz	r2, 8003fb6 <_printf_common+0x26>
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	6033      	str	r3, [r6, #0]
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	0699      	lsls	r1, r3, #26
 8003fba:	bf42      	ittt	mi
 8003fbc:	6833      	ldrmi	r3, [r6, #0]
 8003fbe:	3302      	addmi	r3, #2
 8003fc0:	6033      	strmi	r3, [r6, #0]
 8003fc2:	6825      	ldr	r5, [r4, #0]
 8003fc4:	f015 0506 	ands.w	r5, r5, #6
 8003fc8:	d106      	bne.n	8003fd8 <_printf_common+0x48>
 8003fca:	f104 0a19 	add.w	sl, r4, #25
 8003fce:	68e3      	ldr	r3, [r4, #12]
 8003fd0:	6832      	ldr	r2, [r6, #0]
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	42ab      	cmp	r3, r5
 8003fd6:	dc26      	bgt.n	8004026 <_printf_common+0x96>
 8003fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fdc:	1e13      	subs	r3, r2, #0
 8003fde:	6822      	ldr	r2, [r4, #0]
 8003fe0:	bf18      	it	ne
 8003fe2:	2301      	movne	r3, #1
 8003fe4:	0692      	lsls	r2, r2, #26
 8003fe6:	d42b      	bmi.n	8004040 <_printf_common+0xb0>
 8003fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fec:	4649      	mov	r1, r9
 8003fee:	4638      	mov	r0, r7
 8003ff0:	47c0      	blx	r8
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	d01e      	beq.n	8004034 <_printf_common+0xa4>
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	68e5      	ldr	r5, [r4, #12]
 8003ffa:	6832      	ldr	r2, [r6, #0]
 8003ffc:	f003 0306 	and.w	r3, r3, #6
 8004000:	2b04      	cmp	r3, #4
 8004002:	bf08      	it	eq
 8004004:	1aad      	subeq	r5, r5, r2
 8004006:	68a3      	ldr	r3, [r4, #8]
 8004008:	6922      	ldr	r2, [r4, #16]
 800400a:	bf0c      	ite	eq
 800400c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004010:	2500      	movne	r5, #0
 8004012:	4293      	cmp	r3, r2
 8004014:	bfc4      	itt	gt
 8004016:	1a9b      	subgt	r3, r3, r2
 8004018:	18ed      	addgt	r5, r5, r3
 800401a:	2600      	movs	r6, #0
 800401c:	341a      	adds	r4, #26
 800401e:	42b5      	cmp	r5, r6
 8004020:	d11a      	bne.n	8004058 <_printf_common+0xc8>
 8004022:	2000      	movs	r0, #0
 8004024:	e008      	b.n	8004038 <_printf_common+0xa8>
 8004026:	2301      	movs	r3, #1
 8004028:	4652      	mov	r2, sl
 800402a:	4649      	mov	r1, r9
 800402c:	4638      	mov	r0, r7
 800402e:	47c0      	blx	r8
 8004030:	3001      	adds	r0, #1
 8004032:	d103      	bne.n	800403c <_printf_common+0xac>
 8004034:	f04f 30ff 	mov.w	r0, #4294967295
 8004038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800403c:	3501      	adds	r5, #1
 800403e:	e7c6      	b.n	8003fce <_printf_common+0x3e>
 8004040:	18e1      	adds	r1, r4, r3
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	2030      	movs	r0, #48	; 0x30
 8004046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800404a:	4422      	add	r2, r4
 800404c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004054:	3302      	adds	r3, #2
 8004056:	e7c7      	b.n	8003fe8 <_printf_common+0x58>
 8004058:	2301      	movs	r3, #1
 800405a:	4622      	mov	r2, r4
 800405c:	4649      	mov	r1, r9
 800405e:	4638      	mov	r0, r7
 8004060:	47c0      	blx	r8
 8004062:	3001      	adds	r0, #1
 8004064:	d0e6      	beq.n	8004034 <_printf_common+0xa4>
 8004066:	3601      	adds	r6, #1
 8004068:	e7d9      	b.n	800401e <_printf_common+0x8e>
	...

0800406c <_printf_i>:
 800406c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004070:	460c      	mov	r4, r1
 8004072:	4691      	mov	r9, r2
 8004074:	7e27      	ldrb	r7, [r4, #24]
 8004076:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004078:	2f78      	cmp	r7, #120	; 0x78
 800407a:	4680      	mov	r8, r0
 800407c:	469a      	mov	sl, r3
 800407e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004082:	d807      	bhi.n	8004094 <_printf_i+0x28>
 8004084:	2f62      	cmp	r7, #98	; 0x62
 8004086:	d80a      	bhi.n	800409e <_printf_i+0x32>
 8004088:	2f00      	cmp	r7, #0
 800408a:	f000 80d8 	beq.w	800423e <_printf_i+0x1d2>
 800408e:	2f58      	cmp	r7, #88	; 0x58
 8004090:	f000 80a3 	beq.w	80041da <_printf_i+0x16e>
 8004094:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800409c:	e03a      	b.n	8004114 <_printf_i+0xa8>
 800409e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040a2:	2b15      	cmp	r3, #21
 80040a4:	d8f6      	bhi.n	8004094 <_printf_i+0x28>
 80040a6:	a001      	add	r0, pc, #4	; (adr r0, 80040ac <_printf_i+0x40>)
 80040a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80040ac:	08004105 	.word	0x08004105
 80040b0:	08004119 	.word	0x08004119
 80040b4:	08004095 	.word	0x08004095
 80040b8:	08004095 	.word	0x08004095
 80040bc:	08004095 	.word	0x08004095
 80040c0:	08004095 	.word	0x08004095
 80040c4:	08004119 	.word	0x08004119
 80040c8:	08004095 	.word	0x08004095
 80040cc:	08004095 	.word	0x08004095
 80040d0:	08004095 	.word	0x08004095
 80040d4:	08004095 	.word	0x08004095
 80040d8:	08004225 	.word	0x08004225
 80040dc:	08004149 	.word	0x08004149
 80040e0:	08004207 	.word	0x08004207
 80040e4:	08004095 	.word	0x08004095
 80040e8:	08004095 	.word	0x08004095
 80040ec:	08004247 	.word	0x08004247
 80040f0:	08004095 	.word	0x08004095
 80040f4:	08004149 	.word	0x08004149
 80040f8:	08004095 	.word	0x08004095
 80040fc:	08004095 	.word	0x08004095
 8004100:	0800420f 	.word	0x0800420f
 8004104:	680b      	ldr	r3, [r1, #0]
 8004106:	1d1a      	adds	r2, r3, #4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	600a      	str	r2, [r1, #0]
 800410c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004114:	2301      	movs	r3, #1
 8004116:	e0a3      	b.n	8004260 <_printf_i+0x1f4>
 8004118:	6825      	ldr	r5, [r4, #0]
 800411a:	6808      	ldr	r0, [r1, #0]
 800411c:	062e      	lsls	r6, r5, #24
 800411e:	f100 0304 	add.w	r3, r0, #4
 8004122:	d50a      	bpl.n	800413a <_printf_i+0xce>
 8004124:	6805      	ldr	r5, [r0, #0]
 8004126:	600b      	str	r3, [r1, #0]
 8004128:	2d00      	cmp	r5, #0
 800412a:	da03      	bge.n	8004134 <_printf_i+0xc8>
 800412c:	232d      	movs	r3, #45	; 0x2d
 800412e:	426d      	negs	r5, r5
 8004130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004134:	485e      	ldr	r0, [pc, #376]	; (80042b0 <_printf_i+0x244>)
 8004136:	230a      	movs	r3, #10
 8004138:	e019      	b.n	800416e <_printf_i+0x102>
 800413a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800413e:	6805      	ldr	r5, [r0, #0]
 8004140:	600b      	str	r3, [r1, #0]
 8004142:	bf18      	it	ne
 8004144:	b22d      	sxthne	r5, r5
 8004146:	e7ef      	b.n	8004128 <_printf_i+0xbc>
 8004148:	680b      	ldr	r3, [r1, #0]
 800414a:	6825      	ldr	r5, [r4, #0]
 800414c:	1d18      	adds	r0, r3, #4
 800414e:	6008      	str	r0, [r1, #0]
 8004150:	0628      	lsls	r0, r5, #24
 8004152:	d501      	bpl.n	8004158 <_printf_i+0xec>
 8004154:	681d      	ldr	r5, [r3, #0]
 8004156:	e002      	b.n	800415e <_printf_i+0xf2>
 8004158:	0669      	lsls	r1, r5, #25
 800415a:	d5fb      	bpl.n	8004154 <_printf_i+0xe8>
 800415c:	881d      	ldrh	r5, [r3, #0]
 800415e:	4854      	ldr	r0, [pc, #336]	; (80042b0 <_printf_i+0x244>)
 8004160:	2f6f      	cmp	r7, #111	; 0x6f
 8004162:	bf0c      	ite	eq
 8004164:	2308      	moveq	r3, #8
 8004166:	230a      	movne	r3, #10
 8004168:	2100      	movs	r1, #0
 800416a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800416e:	6866      	ldr	r6, [r4, #4]
 8004170:	60a6      	str	r6, [r4, #8]
 8004172:	2e00      	cmp	r6, #0
 8004174:	bfa2      	ittt	ge
 8004176:	6821      	ldrge	r1, [r4, #0]
 8004178:	f021 0104 	bicge.w	r1, r1, #4
 800417c:	6021      	strge	r1, [r4, #0]
 800417e:	b90d      	cbnz	r5, 8004184 <_printf_i+0x118>
 8004180:	2e00      	cmp	r6, #0
 8004182:	d04d      	beq.n	8004220 <_printf_i+0x1b4>
 8004184:	4616      	mov	r6, r2
 8004186:	fbb5 f1f3 	udiv	r1, r5, r3
 800418a:	fb03 5711 	mls	r7, r3, r1, r5
 800418e:	5dc7      	ldrb	r7, [r0, r7]
 8004190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004194:	462f      	mov	r7, r5
 8004196:	42bb      	cmp	r3, r7
 8004198:	460d      	mov	r5, r1
 800419a:	d9f4      	bls.n	8004186 <_printf_i+0x11a>
 800419c:	2b08      	cmp	r3, #8
 800419e:	d10b      	bne.n	80041b8 <_printf_i+0x14c>
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	07df      	lsls	r7, r3, #31
 80041a4:	d508      	bpl.n	80041b8 <_printf_i+0x14c>
 80041a6:	6923      	ldr	r3, [r4, #16]
 80041a8:	6861      	ldr	r1, [r4, #4]
 80041aa:	4299      	cmp	r1, r3
 80041ac:	bfde      	ittt	le
 80041ae:	2330      	movle	r3, #48	; 0x30
 80041b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041b8:	1b92      	subs	r2, r2, r6
 80041ba:	6122      	str	r2, [r4, #16]
 80041bc:	f8cd a000 	str.w	sl, [sp]
 80041c0:	464b      	mov	r3, r9
 80041c2:	aa03      	add	r2, sp, #12
 80041c4:	4621      	mov	r1, r4
 80041c6:	4640      	mov	r0, r8
 80041c8:	f7ff fee2 	bl	8003f90 <_printf_common>
 80041cc:	3001      	adds	r0, #1
 80041ce:	d14c      	bne.n	800426a <_printf_i+0x1fe>
 80041d0:	f04f 30ff 	mov.w	r0, #4294967295
 80041d4:	b004      	add	sp, #16
 80041d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041da:	4835      	ldr	r0, [pc, #212]	; (80042b0 <_printf_i+0x244>)
 80041dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	680e      	ldr	r6, [r1, #0]
 80041e4:	061f      	lsls	r7, r3, #24
 80041e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80041ea:	600e      	str	r6, [r1, #0]
 80041ec:	d514      	bpl.n	8004218 <_printf_i+0x1ac>
 80041ee:	07d9      	lsls	r1, r3, #31
 80041f0:	bf44      	itt	mi
 80041f2:	f043 0320 	orrmi.w	r3, r3, #32
 80041f6:	6023      	strmi	r3, [r4, #0]
 80041f8:	b91d      	cbnz	r5, 8004202 <_printf_i+0x196>
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	f023 0320 	bic.w	r3, r3, #32
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	2310      	movs	r3, #16
 8004204:	e7b0      	b.n	8004168 <_printf_i+0xfc>
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	f043 0320 	orr.w	r3, r3, #32
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	2378      	movs	r3, #120	; 0x78
 8004210:	4828      	ldr	r0, [pc, #160]	; (80042b4 <_printf_i+0x248>)
 8004212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004216:	e7e3      	b.n	80041e0 <_printf_i+0x174>
 8004218:	065e      	lsls	r6, r3, #25
 800421a:	bf48      	it	mi
 800421c:	b2ad      	uxthmi	r5, r5
 800421e:	e7e6      	b.n	80041ee <_printf_i+0x182>
 8004220:	4616      	mov	r6, r2
 8004222:	e7bb      	b.n	800419c <_printf_i+0x130>
 8004224:	680b      	ldr	r3, [r1, #0]
 8004226:	6826      	ldr	r6, [r4, #0]
 8004228:	6960      	ldr	r0, [r4, #20]
 800422a:	1d1d      	adds	r5, r3, #4
 800422c:	600d      	str	r5, [r1, #0]
 800422e:	0635      	lsls	r5, r6, #24
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	d501      	bpl.n	8004238 <_printf_i+0x1cc>
 8004234:	6018      	str	r0, [r3, #0]
 8004236:	e002      	b.n	800423e <_printf_i+0x1d2>
 8004238:	0671      	lsls	r1, r6, #25
 800423a:	d5fb      	bpl.n	8004234 <_printf_i+0x1c8>
 800423c:	8018      	strh	r0, [r3, #0]
 800423e:	2300      	movs	r3, #0
 8004240:	6123      	str	r3, [r4, #16]
 8004242:	4616      	mov	r6, r2
 8004244:	e7ba      	b.n	80041bc <_printf_i+0x150>
 8004246:	680b      	ldr	r3, [r1, #0]
 8004248:	1d1a      	adds	r2, r3, #4
 800424a:	600a      	str	r2, [r1, #0]
 800424c:	681e      	ldr	r6, [r3, #0]
 800424e:	6862      	ldr	r2, [r4, #4]
 8004250:	2100      	movs	r1, #0
 8004252:	4630      	mov	r0, r6
 8004254:	f7fb ffc4 	bl	80001e0 <memchr>
 8004258:	b108      	cbz	r0, 800425e <_printf_i+0x1f2>
 800425a:	1b80      	subs	r0, r0, r6
 800425c:	6060      	str	r0, [r4, #4]
 800425e:	6863      	ldr	r3, [r4, #4]
 8004260:	6123      	str	r3, [r4, #16]
 8004262:	2300      	movs	r3, #0
 8004264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004268:	e7a8      	b.n	80041bc <_printf_i+0x150>
 800426a:	6923      	ldr	r3, [r4, #16]
 800426c:	4632      	mov	r2, r6
 800426e:	4649      	mov	r1, r9
 8004270:	4640      	mov	r0, r8
 8004272:	47d0      	blx	sl
 8004274:	3001      	adds	r0, #1
 8004276:	d0ab      	beq.n	80041d0 <_printf_i+0x164>
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	079b      	lsls	r3, r3, #30
 800427c:	d413      	bmi.n	80042a6 <_printf_i+0x23a>
 800427e:	68e0      	ldr	r0, [r4, #12]
 8004280:	9b03      	ldr	r3, [sp, #12]
 8004282:	4298      	cmp	r0, r3
 8004284:	bfb8      	it	lt
 8004286:	4618      	movlt	r0, r3
 8004288:	e7a4      	b.n	80041d4 <_printf_i+0x168>
 800428a:	2301      	movs	r3, #1
 800428c:	4632      	mov	r2, r6
 800428e:	4649      	mov	r1, r9
 8004290:	4640      	mov	r0, r8
 8004292:	47d0      	blx	sl
 8004294:	3001      	adds	r0, #1
 8004296:	d09b      	beq.n	80041d0 <_printf_i+0x164>
 8004298:	3501      	adds	r5, #1
 800429a:	68e3      	ldr	r3, [r4, #12]
 800429c:	9903      	ldr	r1, [sp, #12]
 800429e:	1a5b      	subs	r3, r3, r1
 80042a0:	42ab      	cmp	r3, r5
 80042a2:	dcf2      	bgt.n	800428a <_printf_i+0x21e>
 80042a4:	e7eb      	b.n	800427e <_printf_i+0x212>
 80042a6:	2500      	movs	r5, #0
 80042a8:	f104 0619 	add.w	r6, r4, #25
 80042ac:	e7f5      	b.n	800429a <_printf_i+0x22e>
 80042ae:	bf00      	nop
 80042b0:	08004a6d 	.word	0x08004a6d
 80042b4:	08004a7e 	.word	0x08004a7e

080042b8 <memmove>:
 80042b8:	4288      	cmp	r0, r1
 80042ba:	b510      	push	{r4, lr}
 80042bc:	eb01 0402 	add.w	r4, r1, r2
 80042c0:	d902      	bls.n	80042c8 <memmove+0x10>
 80042c2:	4284      	cmp	r4, r0
 80042c4:	4623      	mov	r3, r4
 80042c6:	d807      	bhi.n	80042d8 <memmove+0x20>
 80042c8:	1e43      	subs	r3, r0, #1
 80042ca:	42a1      	cmp	r1, r4
 80042cc:	d008      	beq.n	80042e0 <memmove+0x28>
 80042ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042d6:	e7f8      	b.n	80042ca <memmove+0x12>
 80042d8:	4402      	add	r2, r0
 80042da:	4601      	mov	r1, r0
 80042dc:	428a      	cmp	r2, r1
 80042de:	d100      	bne.n	80042e2 <memmove+0x2a>
 80042e0:	bd10      	pop	{r4, pc}
 80042e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042ea:	e7f7      	b.n	80042dc <memmove+0x24>

080042ec <_free_r>:
 80042ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042ee:	2900      	cmp	r1, #0
 80042f0:	d048      	beq.n	8004384 <_free_r+0x98>
 80042f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042f6:	9001      	str	r0, [sp, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f1a1 0404 	sub.w	r4, r1, #4
 80042fe:	bfb8      	it	lt
 8004300:	18e4      	addlt	r4, r4, r3
 8004302:	f000 f8d3 	bl	80044ac <__malloc_lock>
 8004306:	4a20      	ldr	r2, [pc, #128]	; (8004388 <_free_r+0x9c>)
 8004308:	9801      	ldr	r0, [sp, #4]
 800430a:	6813      	ldr	r3, [r2, #0]
 800430c:	4615      	mov	r5, r2
 800430e:	b933      	cbnz	r3, 800431e <_free_r+0x32>
 8004310:	6063      	str	r3, [r4, #4]
 8004312:	6014      	str	r4, [r2, #0]
 8004314:	b003      	add	sp, #12
 8004316:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800431a:	f000 b8cd 	b.w	80044b8 <__malloc_unlock>
 800431e:	42a3      	cmp	r3, r4
 8004320:	d90b      	bls.n	800433a <_free_r+0x4e>
 8004322:	6821      	ldr	r1, [r4, #0]
 8004324:	1862      	adds	r2, r4, r1
 8004326:	4293      	cmp	r3, r2
 8004328:	bf04      	itt	eq
 800432a:	681a      	ldreq	r2, [r3, #0]
 800432c:	685b      	ldreq	r3, [r3, #4]
 800432e:	6063      	str	r3, [r4, #4]
 8004330:	bf04      	itt	eq
 8004332:	1852      	addeq	r2, r2, r1
 8004334:	6022      	streq	r2, [r4, #0]
 8004336:	602c      	str	r4, [r5, #0]
 8004338:	e7ec      	b.n	8004314 <_free_r+0x28>
 800433a:	461a      	mov	r2, r3
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	b10b      	cbz	r3, 8004344 <_free_r+0x58>
 8004340:	42a3      	cmp	r3, r4
 8004342:	d9fa      	bls.n	800433a <_free_r+0x4e>
 8004344:	6811      	ldr	r1, [r2, #0]
 8004346:	1855      	adds	r5, r2, r1
 8004348:	42a5      	cmp	r5, r4
 800434a:	d10b      	bne.n	8004364 <_free_r+0x78>
 800434c:	6824      	ldr	r4, [r4, #0]
 800434e:	4421      	add	r1, r4
 8004350:	1854      	adds	r4, r2, r1
 8004352:	42a3      	cmp	r3, r4
 8004354:	6011      	str	r1, [r2, #0]
 8004356:	d1dd      	bne.n	8004314 <_free_r+0x28>
 8004358:	681c      	ldr	r4, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	6053      	str	r3, [r2, #4]
 800435e:	4421      	add	r1, r4
 8004360:	6011      	str	r1, [r2, #0]
 8004362:	e7d7      	b.n	8004314 <_free_r+0x28>
 8004364:	d902      	bls.n	800436c <_free_r+0x80>
 8004366:	230c      	movs	r3, #12
 8004368:	6003      	str	r3, [r0, #0]
 800436a:	e7d3      	b.n	8004314 <_free_r+0x28>
 800436c:	6825      	ldr	r5, [r4, #0]
 800436e:	1961      	adds	r1, r4, r5
 8004370:	428b      	cmp	r3, r1
 8004372:	bf04      	itt	eq
 8004374:	6819      	ldreq	r1, [r3, #0]
 8004376:	685b      	ldreq	r3, [r3, #4]
 8004378:	6063      	str	r3, [r4, #4]
 800437a:	bf04      	itt	eq
 800437c:	1949      	addeq	r1, r1, r5
 800437e:	6021      	streq	r1, [r4, #0]
 8004380:	6054      	str	r4, [r2, #4]
 8004382:	e7c7      	b.n	8004314 <_free_r+0x28>
 8004384:	b003      	add	sp, #12
 8004386:	bd30      	pop	{r4, r5, pc}
 8004388:	2000014c 	.word	0x2000014c

0800438c <_malloc_r>:
 800438c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438e:	1ccd      	adds	r5, r1, #3
 8004390:	f025 0503 	bic.w	r5, r5, #3
 8004394:	3508      	adds	r5, #8
 8004396:	2d0c      	cmp	r5, #12
 8004398:	bf38      	it	cc
 800439a:	250c      	movcc	r5, #12
 800439c:	2d00      	cmp	r5, #0
 800439e:	4606      	mov	r6, r0
 80043a0:	db01      	blt.n	80043a6 <_malloc_r+0x1a>
 80043a2:	42a9      	cmp	r1, r5
 80043a4:	d903      	bls.n	80043ae <_malloc_r+0x22>
 80043a6:	230c      	movs	r3, #12
 80043a8:	6033      	str	r3, [r6, #0]
 80043aa:	2000      	movs	r0, #0
 80043ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ae:	f000 f87d 	bl	80044ac <__malloc_lock>
 80043b2:	4921      	ldr	r1, [pc, #132]	; (8004438 <_malloc_r+0xac>)
 80043b4:	680a      	ldr	r2, [r1, #0]
 80043b6:	4614      	mov	r4, r2
 80043b8:	b99c      	cbnz	r4, 80043e2 <_malloc_r+0x56>
 80043ba:	4f20      	ldr	r7, [pc, #128]	; (800443c <_malloc_r+0xb0>)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	b923      	cbnz	r3, 80043ca <_malloc_r+0x3e>
 80043c0:	4621      	mov	r1, r4
 80043c2:	4630      	mov	r0, r6
 80043c4:	f000 f862 	bl	800448c <_sbrk_r>
 80043c8:	6038      	str	r0, [r7, #0]
 80043ca:	4629      	mov	r1, r5
 80043cc:	4630      	mov	r0, r6
 80043ce:	f000 f85d 	bl	800448c <_sbrk_r>
 80043d2:	1c43      	adds	r3, r0, #1
 80043d4:	d123      	bne.n	800441e <_malloc_r+0x92>
 80043d6:	230c      	movs	r3, #12
 80043d8:	6033      	str	r3, [r6, #0]
 80043da:	4630      	mov	r0, r6
 80043dc:	f000 f86c 	bl	80044b8 <__malloc_unlock>
 80043e0:	e7e3      	b.n	80043aa <_malloc_r+0x1e>
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	1b5b      	subs	r3, r3, r5
 80043e6:	d417      	bmi.n	8004418 <_malloc_r+0x8c>
 80043e8:	2b0b      	cmp	r3, #11
 80043ea:	d903      	bls.n	80043f4 <_malloc_r+0x68>
 80043ec:	6023      	str	r3, [r4, #0]
 80043ee:	441c      	add	r4, r3
 80043f0:	6025      	str	r5, [r4, #0]
 80043f2:	e004      	b.n	80043fe <_malloc_r+0x72>
 80043f4:	6863      	ldr	r3, [r4, #4]
 80043f6:	42a2      	cmp	r2, r4
 80043f8:	bf0c      	ite	eq
 80043fa:	600b      	streq	r3, [r1, #0]
 80043fc:	6053      	strne	r3, [r2, #4]
 80043fe:	4630      	mov	r0, r6
 8004400:	f000 f85a 	bl	80044b8 <__malloc_unlock>
 8004404:	f104 000b 	add.w	r0, r4, #11
 8004408:	1d23      	adds	r3, r4, #4
 800440a:	f020 0007 	bic.w	r0, r0, #7
 800440e:	1ac2      	subs	r2, r0, r3
 8004410:	d0cc      	beq.n	80043ac <_malloc_r+0x20>
 8004412:	1a1b      	subs	r3, r3, r0
 8004414:	50a3      	str	r3, [r4, r2]
 8004416:	e7c9      	b.n	80043ac <_malloc_r+0x20>
 8004418:	4622      	mov	r2, r4
 800441a:	6864      	ldr	r4, [r4, #4]
 800441c:	e7cc      	b.n	80043b8 <_malloc_r+0x2c>
 800441e:	1cc4      	adds	r4, r0, #3
 8004420:	f024 0403 	bic.w	r4, r4, #3
 8004424:	42a0      	cmp	r0, r4
 8004426:	d0e3      	beq.n	80043f0 <_malloc_r+0x64>
 8004428:	1a21      	subs	r1, r4, r0
 800442a:	4630      	mov	r0, r6
 800442c:	f000 f82e 	bl	800448c <_sbrk_r>
 8004430:	3001      	adds	r0, #1
 8004432:	d1dd      	bne.n	80043f0 <_malloc_r+0x64>
 8004434:	e7cf      	b.n	80043d6 <_malloc_r+0x4a>
 8004436:	bf00      	nop
 8004438:	2000014c 	.word	0x2000014c
 800443c:	20000150 	.word	0x20000150

08004440 <_realloc_r>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	4607      	mov	r7, r0
 8004444:	4614      	mov	r4, r2
 8004446:	460e      	mov	r6, r1
 8004448:	b921      	cbnz	r1, 8004454 <_realloc_r+0x14>
 800444a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800444e:	4611      	mov	r1, r2
 8004450:	f7ff bf9c 	b.w	800438c <_malloc_r>
 8004454:	b922      	cbnz	r2, 8004460 <_realloc_r+0x20>
 8004456:	f7ff ff49 	bl	80042ec <_free_r>
 800445a:	4625      	mov	r5, r4
 800445c:	4628      	mov	r0, r5
 800445e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004460:	f000 f830 	bl	80044c4 <_malloc_usable_size_r>
 8004464:	42a0      	cmp	r0, r4
 8004466:	d20f      	bcs.n	8004488 <_realloc_r+0x48>
 8004468:	4621      	mov	r1, r4
 800446a:	4638      	mov	r0, r7
 800446c:	f7ff ff8e 	bl	800438c <_malloc_r>
 8004470:	4605      	mov	r5, r0
 8004472:	2800      	cmp	r0, #0
 8004474:	d0f2      	beq.n	800445c <_realloc_r+0x1c>
 8004476:	4631      	mov	r1, r6
 8004478:	4622      	mov	r2, r4
 800447a:	f7ff fbf7 	bl	8003c6c <memcpy>
 800447e:	4631      	mov	r1, r6
 8004480:	4638      	mov	r0, r7
 8004482:	f7ff ff33 	bl	80042ec <_free_r>
 8004486:	e7e9      	b.n	800445c <_realloc_r+0x1c>
 8004488:	4635      	mov	r5, r6
 800448a:	e7e7      	b.n	800445c <_realloc_r+0x1c>

0800448c <_sbrk_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4d06      	ldr	r5, [pc, #24]	; (80044a8 <_sbrk_r+0x1c>)
 8004490:	2300      	movs	r3, #0
 8004492:	4604      	mov	r4, r0
 8004494:	4608      	mov	r0, r1
 8004496:	602b      	str	r3, [r5, #0]
 8004498:	f7fd fb38 	bl	8001b0c <_sbrk>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d102      	bne.n	80044a6 <_sbrk_r+0x1a>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	b103      	cbz	r3, 80044a6 <_sbrk_r+0x1a>
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	20000228 	.word	0x20000228

080044ac <__malloc_lock>:
 80044ac:	4801      	ldr	r0, [pc, #4]	; (80044b4 <__malloc_lock+0x8>)
 80044ae:	f000 b811 	b.w	80044d4 <__retarget_lock_acquire_recursive>
 80044b2:	bf00      	nop
 80044b4:	20000230 	.word	0x20000230

080044b8 <__malloc_unlock>:
 80044b8:	4801      	ldr	r0, [pc, #4]	; (80044c0 <__malloc_unlock+0x8>)
 80044ba:	f000 b80c 	b.w	80044d6 <__retarget_lock_release_recursive>
 80044be:	bf00      	nop
 80044c0:	20000230 	.word	0x20000230

080044c4 <_malloc_usable_size_r>:
 80044c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044c8:	1f18      	subs	r0, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	bfbc      	itt	lt
 80044ce:	580b      	ldrlt	r3, [r1, r0]
 80044d0:	18c0      	addlt	r0, r0, r3
 80044d2:	4770      	bx	lr

080044d4 <__retarget_lock_acquire_recursive>:
 80044d4:	4770      	bx	lr

080044d6 <__retarget_lock_release_recursive>:
 80044d6:	4770      	bx	lr

080044d8 <_init>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	bf00      	nop
 80044dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044de:	bc08      	pop	{r3}
 80044e0:	469e      	mov	lr, r3
 80044e2:	4770      	bx	lr

080044e4 <_fini>:
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e6:	bf00      	nop
 80044e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ea:	bc08      	pop	{r3}
 80044ec:	469e      	mov	lr, r3
 80044ee:	4770      	bx	lr
